{
	"info": {
		"_postman_id": "23f85d9e-1716-4fbb-b53c-eab9b33517b3",
		"name": "Агенты Windows",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19662031"
	},
	"item": [
		{
			"name": "Агенты Windows",
			"item": [
				{
					"name": "Дефолтные таски",
					"item": [
						{
							"name": "GET agents/{agent_id}/tasks/{uid}(driveDeviceAudit)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"fsType\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mountPoint\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"serialNumber\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"size\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"processed_at\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().fsType).to.eql(pm.environment.get(\"fsType\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mountPoint).to.eql(pm.environment.get(\"mountPoint\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().serialNumber).to.eql(pm.environment.get(\"serialNumber\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().size).to.eql(pm.environment.get(\"size\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().machine_uid).to.eql(pm.environment.get(\"machine_uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().processed_at).to.eql(pm.environment.get(\"processed_at\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().result).to.eql(pm.environment.get(\"result\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.fsType).to.be.a(\"string\");\r",
											"     pm.expect(jsonData.mountPoint).to.be.a(\"string\");\r",
											"      pm.expect(jsonData.serialNumber).to.be.a(\"string\");\r",
											"       pm.expect(jsonData.size).to.be.a(\"string\");\r",
											"        pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"         pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.machine_uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.processed_at).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.result).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains fsType\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"fsType\", \"NTFS\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mountPoint\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mountPoint\", \"C:/\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains serialNumber\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"serialNumber\", \"1847389967\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains size\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"size\", 156918345728);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"logical\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"uid\", \"\\\\\\\\?\\\\Volume{aeee3d88-98ca-11e5-80b9-14dae9b3ad7b}\\\\\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_uid\", \"591fe9a7-3ad3-4012-818a-5588ec4eb823\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains processed_at\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"processed_at\",  \"2021-12-28T11:48:15.117+03:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains result\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"result\", \"Success\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"data\": [\r\n    \t{\r\n        \t\"fsType\": \"NTFS\",\r\n        \t\"mountPoint\": \"C:/\",\r\n        \t\"serialNumber\": \"1847389967\",\r\n        \t\"size\": 156918345728,\r\n        \t\"type\": \"logical\",\r\n        \t\"uid\": \"\\\\\\\\?\\\\Volume{aeee3d88-98ca-11e5-80b9-14dae9b3ad7b}\\\\\"\r\n    \t}\r\n],\r\n\t\"machine_uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\",\r\n\t\"processed_at\": \"2021-12-28T11:48:15.117+03:00\",\r\n\t\"result\": \"Success\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/605d8e48-54e3-4db2-af50-800fc4adeab2/tasks/605d8e48-54e3-4db2-af50-800fc4adeab2",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"605d8e48-54e3-4db2-af50-800fc4adeab2",
										"tasks",
										"605d8e48-54e3-4db2-af50-800fc4adeab2"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET agents/{agent_id}/tasks/{uid}(gpuDeviceAudit)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"note\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"processed_at\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  \r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().note).to.eql(pm.environment.get(\"note\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().machine_uid).to.eql(pm.environment.get(\"machine_uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().processed_at).to.eql(pm.environment.get(\"processed_at\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().result).to.eql(pm.environment.get(\"result\"));\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.note).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.machine_uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.processed_at).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.result).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"Microsoft Basic Display Adapter\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains note\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"note\", \"Microsoft Basic Display Adapter\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_uid\", \"591fe9a7-3ad3-4012-818a-5588ec4eb823\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains processed_at\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"processed_at\",  \"2021-12-28T11:48:14.835+03:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains result\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"result\", \"Success\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"data\": [\r\n    \t{\r\n        \t\"name\": \"Microsoft Basic Display Adapter\",\r\n        \t\"note\": \"Microsoft Basic Display Adapter\"\r\n    \t}\r\n\t],\r\n\t\"machine_uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\",\r\n\t\"processed_at\": \"2021-12-28T11:48:14.835+03:00\",\r\n\t\"result\": \"Success\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/605d8e48-54e3-4db2-af50-800fc4adeab2/tasks/605d8e48-54e3-4db2-af50-800fc4adeab2",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"605d8e48-54e3-4db2-af50-800fc4adeab2",
										"tasks",
										"605d8e48-54e3-4db2-af50-800fc4adeab2"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET agents/{agent_id}/tasks/{uid}(cpuDeviceAudit)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"architecture\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"note\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"numCores\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"processed_at\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().architecture).to.eql(pm.environment.get(\"architeture\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().note).to.eql(pm.environment.get(\"note\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().numCores).to.eql(pm.environment.get(\"numCores\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().machine_uid).to.eql(pm.environment.get(\"machine_uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().processed_at).to.eql(pm.environment.get(\"processed_at\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().result).to.eql(pm.environment.get(\"result\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.architecture).to.be.a(\"string\");\r",
											"     pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"      pm.expect(jsonData.note).to.be.a(\"string\");\r",
											"       pm.expect(jsonData.numCores).to.be.an(\"integer\");\r",
											"         pm.expect(jsonData.uid).to.be.an(\"integer\");\r",
											"   pm.expect(jsonData.machine_uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.processed_at).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.result).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains architecture\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"architecture\", \"x86_64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"AMD Phenom(tm) II X6 1100T Processor\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains note\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"note\", \"AMD64 Family 16 Model 10 Stepping 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains numCores\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"numCores\", 6);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"uid\", 0);\r",
											"    });\r",
											"\r",
											"pm.test(\"Response contains machine_uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_uid\", \"591fe9a7-3ad3-4012-818a-5588ec4eb823\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains processed_at\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"processed_at\",  \"2021-12-28T11:48:15.117+03:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains result\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"result\", \"Success\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"data\": [\r\n    \t{\r\n        \t\"architecture\": \"x86_64\",\r\n        \t\"name\": \"AMD Phenom(tm) II X6 1100T Processor\",\r\n        \t\"note\": \"AMD64 Family 16 Model 10 Stepping 0\",\r\n        \t\"numCores\": 6,\r\n        \t\"uid\": \"0\"\r\n    \t}\r\n\t],\r\n\t\"machine_uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\",\r\n\t\"processed_at\": \"2021-12-28T11:48:14.663+03:00\",\r\n\t\"result\": \"Success\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/605d8e48-54e3-4db2-af50-800fc4adeab2/tasks/605d8e48-54e3-4db2-af50-800fc4adeab2",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"605d8e48-54e3-4db2-af50-800fc4adeab2",
										"tasks",
										"605d8e48-54e3-4db2-af50-800fc4adeab2"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET agents/{agent_id}/tasks/{uid}(softAudit)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"exePath\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"installedAt\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"note\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"owner\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"processed_at\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().exePath).to.eql(pm.environment.get(\"exePath\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().installedAt).to.eql(pm.environment.get(\"installedAt\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().note).to.eql(pm.environment.get(\"note\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().owner).to.eql(pm.environment.get(\"owner\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().machine_uid).to.eql(pm.environment.get(\"machine_uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().processed_at).to.eql(pm.environment.get(\"processed_at\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().result).to.eql(pm.environment.get(\"result\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.exePath).to.be.a(\"string\");\r",
											"     pm.expect(jsonData.installedAt).to.be.a(\"string\");\r",
											"      pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"       pm.expect(jsonData.note).to.be.a(\"string\");\r",
											"     pm.expect(jsonData.owner).to.be.a(\"string\");\r",
											"      pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"\r",
											"   pm.expect(jsonData.machine_uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.processed_at).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.result).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains exePath\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"exePath\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains installedAt\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"installedAt\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains note\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"note\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains owner\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"owner\", \"all\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_uid\", \"591fe9a7-3ad3-4012-818a-5588ec4eb823\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains processed_at\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"processed_at\",  \"2021-12-28T11:48:15.117+03:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains result\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"result\", \"Success\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"data\": [\r\n    \t{\r\n        \t\"exePath\": \"\",\r\n        \t\"installedAt\": \"\",\r\n        \t\"name\": \"\",\r\n        \t\"note\": \"\",\r\n        \t\"owner\": \"all\",\r\n        \t\"version\": \"\"\r\n    \t}\r\n  ],\r\n\t\"machine_uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\",\r\n\t\"processed_at\": \"2021-12-28T11:48:28.507+03:00\",\r\n\t\"result\": \"Success\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/605d8e48-54e3-4db2-af50-800fc4adeab2/tasks/605d8e48-54e3-4db2-af50-800fc4adeab2",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"605d8e48-54e3-4db2-af50-800fc4adeab2",
										"tasks",
										"605d8e48-54e3-4db2-af50-800fc4adeab2"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET agents/{agent_id}/tasks(networkDeviceAudit)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"dhcp4Enabled\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"dhcp6Enabled\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"humanReadableName\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ipAddresses\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"macAddress\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"processed_at\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().dhcp4Enabled).to.eql(pm.environment.get(\"dhcp4Enabled\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().dhcp6Enabled).to.eql(pm.environment.get(\"dhcp6Enabled\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().humanReadableName).to.eql(pm.environment.get(\"humanReadableName\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ipAddresses).to.eql(pm.environment.get(\"ipAddresses\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().macAddress).to.eql(pm.environment.get(\"macAddress\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().machine_uid).to.eql(pm.environment.get(\"machine_uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().processed_at).to.eql(pm.environment.get(\"processed_at\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().result).to.eql(pm.environment.get(\"result\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.dhcp4Enabled).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.dhcp6Enabled).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.humanReadableName).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ipAddresses).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.an(\"integer\");\r",
											"   pm.expect(jsonData.machine_uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.processed_at).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.result).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains fsType\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"fsType\", \"NTFS\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains dhcp4Enabled\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"dhcp4Enabled\", false);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains dhcp6Enabled\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"dhcp6Enabled\", false);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains humanReadableName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"humanReadableName\", \"vEthernet (ext238)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ipAddresses\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ipAddresses\", \"192.168.238.2/24\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains macAddress\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"macAddress\", \"C4:A8:1D:7E:32:98\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"ethernet_28\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", 3);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_uid\", \"591fe9a7-3ad3-4012-818a-5588ec4eb823\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains processed_at\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"processed_at\", \"2021-12-28T11:48:14.335+03:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains result\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"result\", \"Success\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"data\": [\r\n    \t{\r\n        \t\"dhcp4Enabled\": false,\r\n        \t\"dhcp6Enabled\": false,\r\n        \t\"humanReadableName\": \"vEthernet (ext238)\",\r\n        \t\"ipAddresses\": [\r\n            \t\"192.168.238.2/24\"\r\n        \t],\r\n        \t\"ipv4Dns\": [\r\n            \t\"\"\r\n        \t],\r\n        \t\"ipv4Gateway\": [\r\n        \t],\r\n        \t\"ipv6Dns\": [\r\n   \t         \"\"\r\n        \t],\r\n        \t\"ipv6Gateway\": [\r\n        \t],\r\n        \t\"macAddress\": \"C4:A8:1D:7E:32:98\",\r\n        \t\"name\": \"ethernet_28\",\r\n        \t\"type\": 3\r\n    \t}\r\n],\r\n\t\"machine_uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\",\r\n\t\"processed_at\": \"2021-12-28T11:48:14.335+03:00\",\r\n\t\"result\": \"Success\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/605d8e48-54e3-4db2-af50-800fc4adeab2/tasks/605d8e48-54e3-4db2-af50-800fc4adeab2",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"605d8e48-54e3-4db2-af50-800fc4adeab2",
										"tasks",
										"605d8e48-54e3-4db2-af50-800fc4adeab2"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET agents/{agent_id}/tasks(baseSystemAudit)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"abi\");\r",
											"    });\r",
											"\r",
											"      pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"architecture\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bios\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"manufacturer\");\r",
											"    });\r",
											"\r",
											"      pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"productName\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"serialNumber\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"cpu\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"      pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"note\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"numCores\");\r",
											"    });\r",
											"\r",
											"\r",
											"      pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"drives\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"fsType\");\r",
											"    });\r",
											"\r",
											"      pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mountPoint\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"size\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"      pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"hostName\");\r",
											"    });\r",
											"\r",
											"      pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"hypervisors\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"kernelName\");\r",
											"    });\r",
											"\r",
											"      pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"kernelVersion\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"prettyName\");\r",
											"    });\r",
											"\r",
											"      pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"username\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"users\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"processed_at\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent).to.eql(pm.environment.get(\"agent\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().abi).to.eql(pm.environment.get(\"abi\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().architecture).to.eql(pm.environment.get(\"architecture\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().bios).to.eql(pm.environment.get(\"bios\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().manufacturer).to.eql(pm.environment.get(\"manufacturer\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"productName\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().serialNumber).to.eql(pm.environment.get(\"serialNumber\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().cpu).to.eql(pm.environment.get(\"cpu\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().note).to.eql(pm.environment.get(\"note\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().numCores).to.eql(pm.environment.get(\"numCores\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().drives).to.eql(pm.environment.get(\"drives\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().fsType).to.eql(pm.environment.get(\"fsType\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mountPoint).to.eql(pm.environment.get(\"mountPoint\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().size).to.eql(pm.environment.get(\"size\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().hostName).to.eql(pm.environment.get(\"hostName\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().hypervisors).to.eql(pm.environment.get(\"hypervisors\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().kernelName).to.eql(pm.environment.get(\"kernelName\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().kernelVersion).to.eql(pm.environment.get(\"kernelVersion\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().prettyName).to.eql(pm.environment.get(\"prettyName\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().username).to.eql(pm.environment.get(\"username\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().users).to.eql(pm.environment.get(\"users\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().machine_uid).to.eql(pm.environment.get(\"machine_uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().processed_at).to.eql(pm.environment.get(\"processed_at\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().result).to.eql(pm.environment.get(\"result\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.agent).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.abi).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.architecture).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.bios).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.manufacturer).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.productName).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.serialNumber).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.cpu).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.note).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.numCores).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.uid).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.drives).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.fsType).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mountPoint).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.size).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.hostName).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.os).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.kernelName).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.kernelVersion).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.prettyName).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.username).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.users).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.machine_uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.processed_at).to.be.a(\"string\");\r",
											" pm.expect(jsonData.result).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains abi\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"abi\", \"x86_64-little_endian-llp64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains architecture\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"architecture\", \"x86_64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"0.4.163\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains manufacturer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"manufacturer\", \"American Megatrends Inc.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains productName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"productName\", \"BIOS Date: 04/16/13 11:24:50 Ver: 18.01\", \"192.168.238.2/24\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains serialNumber\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"serialNumber\", \"System Serial Number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"1801\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"AMD Phenom(tm) II X6 1100T Processor\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains note\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"note\", \"AMD64 Family 16 Model 10 Stepping 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains numCores\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"numCores\", 6);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"uid\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains architecture\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"architecture\", \"x86_64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains fsType\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"fsType\", \"NTFS\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mountPoint\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mountPoint\", \"C:/\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains serialNumber\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"serialNumber\", \"1847389967\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains size\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"size\", \"156918345728\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"logical\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"uid\", \"\\\\\\\\?\\\\Volume{aeee3d88-98ca-11e5-80b9-14dae9b3ad7b}\\\\\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains hostName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"hostName\", \"SRV10904\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"HyperV\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains kernelName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"kernelName\", \"winnt\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains kernelVersion\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"kernelVersion\", \"6.3.9600\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"windows\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains prettyName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"prettyName\", \"Windows Server 2012 R2 Version 6.3 (Build 9600)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains username\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"username\", \"NT AUTHORITY\\\\SYSTEM\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains users\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"users\", \"ACC\\\\Admin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"server2012r2\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains size\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"size\", 16910483456);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains machine_uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_uid\", \"591fe9a7-3ad3-4012-818a-5588ec4eb823\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains processed_at\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"processed_at\", \"2021-12-28T11:48:14.335+03:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains result\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"result\", \"Success\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"data\": {\r\n    \t\"agent\": {\r\n        \t\"abi\": \"x86_64-little_endian-llp64\",\r\n        \t\"architecture\": \"x86_64\",\r\n        \t\"version\": \"0.4.163\"\r\n    \t},\r\n    \t\"bios\": {\r\n        \t\"manufacturer\": \"American Megatrends Inc.\",\r\n        \t\"productName\": \"BIOS Date: 04/16/13 11:24:50 Ver: 18.01\",\r\n        \t\"serialNumber\": \"System Serial Number\",\r\n        \t\"version\": \"1801\"\r\n    \t},\r\n    \t\"cpu\": [\r\n        \t{\r\n            \t\"architecture\": \"x86_64\",\r\n            \t\"name\": \"AMD Phenom(tm) II X6 1100T Processor\",\r\n            \t\"note\": \"AMD64 Family 16 Model 10 Stepping 0\",\r\n            \t\"numCores\": 6,\r\n            \t\"uid\": \"0\"\r\n        \t}\r\n    \t],\r\n    \t\"drives\": [\r\n        \t{\r\n            \t\"fsType\": \"NTFS\",\r\n            \t\"mountPoint\": \"C:/\",\r\n            \t\"serialNumber\": \"1847389967\",\r\n            \t\"size\": 156918345728,\r\n            \t\"type\": \"logical\",\r\n            \t\"uid\": \"\\\\\\\\?\\\\Volume{aeee3d88-98ca-11e5-80b9-14dae9b3ad7b}\\\\\"\r\n        \t}\r\n],\r\n    \t\"hostName\": \"SRV10904\",\r\n    \t\"hypervisors\": [\r\n        \t{\r\n            \t\"name\": \"HyperV\",\r\n            \t\"version\": \"\"\r\n        \t}\r\n    \t],\r\n    \t\"os\": {\r\n        \t\"kernelName\": \"winnt\",\r\n        \t\"kernelVersion\": \"6.3.9600\",\r\n        \t\"name\": \"windows\",\r\n        \t\"prettyName\": \"Windows Server 2012 R2 Version 6.3 (Build 9600)\",\r\n        \t\"username\": \"NT AUTHORITY\\\\SYSTEM\",\r\n        \t\"users\": [\r\n                \"ACC\\\\Admin\"\r\n],\r\n        \t\"version\": \"server2012r2\"\r\n    \t},\r\n    \t\"ram\": [\r\n        \t{\r\n            \t\"size\": 16910483456\r\n        \t}\r\n    \t],\r\n    \t\"uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\"\r\n\t},\r\n\t\"machine_uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\",\r\n\t\"processed_at\": \"2021-12-28T11:48:20.413+03:00\",\r\n\t\"result\": \"Success\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/605d8e48-54e3-4db2-af50-800fc4adeab2/tasks/605d8e48-54e3-4db2-af50-800fc4adeab2",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"605d8e48-54e3-4db2-af50-800fc4adeab2",
										"tasks",
										"605d8e48-54e3-4db2-af50-800fc4adeab2"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}