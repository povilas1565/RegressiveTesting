{
	"info": {
		"_postman_id": "ff59bb62-f5ef-4c99-be7e-ea462826da78",
		"name": "Регресc-тестирование",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19662031"
	},
	"item": [
		{
			"name": "Бекэнд",
			"item": [
				{
					"name": "agents",
					"item": [
						{
							"name": "GET Agents/Update(windows_x64)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											" \r",
											"  pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"     pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response must be with Body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"response must be json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"  pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"windows_x64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"user\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"latest\");\r",
											"})\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"os\" : \"windows_x64\",\r\n    \"type\" : \"user\",\r\n    \"version\" : \"latest\"\r\n}\r\n       ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/update?os=windows_x64&type=user&version=latest",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"update"
									],
									"query": [
										{
											"key": "os",
											"value": "windows_x64"
										},
										{
											"key": "type",
											"value": "user"
										},
										{
											"key": "version",
											"value": "latest"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "HEAD Agents/ Update(windows_x64)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											" \r",
											"  pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"     pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response must be with Body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"response must be json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"  pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"windows_x64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"user\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"latest\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "HEAD",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"os\" : \"windows_x64\",\r\n    \"type\" : \"user\",\r\n    \"version\" : \"latest\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/update?os=windows_x64&type=user&version=latest",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"update"
									],
									"query": [
										{
											"key": "os",
											"value": "windows_x64"
										},
										{
											"key": "type",
											"value": "user"
										},
										{
											"key": "version",
											"value": "latest"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Agents By limit = 15",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"limit\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches integer not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().limit).to.eql(pm.environment.get(\"limit\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.limit).to.be.an(\"integer\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains limit\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"limit\", 15);\r",
											"})\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"  \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?limit=15",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "limit",
											"value": "15"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Agents By limit = 5 /offset = 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"limit\");\r",
											"    pm.expect(pm.response.text()).to.include(\"offset\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches integer not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().limit).to.eql(pm.environment.get(\"limit\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().offset).to.eql(pm.environment.get(\"offset\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.limit).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.offset).to.be.an(\"integer\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains limit\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"limit\", 5);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains offset\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"offset\", 0);\r",
											"});\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?limit=5&offset=0",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Agents/{uid}(status=online)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											" \r",
											"  pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"     pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response must be with Body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"response must be json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"  pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.machine_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"online\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"0.4.199\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_id\", \"НЕсуществующий\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"status\" : \"online\",\r\n    \"version\" : \"0.4.199\",\r\n    \"machine_id\" : \"НЕсуществующий\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&status=online",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "status",
											"value": "online"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Agents / {uid} / send-file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											" \r",
											"     pm.test(\"Status code is 422\", function () {\r",
											"pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"  pm.test(\"Response time is less than 1000ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/uid?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&file_uid=",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"uid"
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "file_uid",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Agents / {uid} / wss",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											" \r",
											"     pm.test(\"Status code is 422\", function () {\r",
											"pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"  pm.test(\"Response time is less than 1000ms\", () => {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/wss",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/wss"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Agents/Update(ubuntu_x64)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											" \r",
											"  pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"     pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response must be with Body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"response must be json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"  pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"ubuntu_x64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"system\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"0.4.189\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"os\" : \"ubuntu_x64\",\r\n    \"type\" : \"system\",\r\n    \"version\" : \"0.4.189\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/update?os=ubuntu_x64&type=system&version=0.4.189",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"update"
									],
									"query": [
										{
											"key": "os",
											"value": "ubuntu_x64"
										},
										{
											"key": "type",
											"value": "system"
										},
										{
											"key": "version",
											"value": "0.4.189"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Agents/Update(rhel8_x64)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"rhel8_x64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"system\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"latest\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"os\" : \"rhel8_x64\",\r\n    \"type\" : \"system\",\r\n    \"version\" : \"latest\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/update?os=rhel8_x64&type=system&version=latest",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"update"
									],
									"query": [
										{
											"key": "os",
											"value": "rhel8_x64"
										},
										{
											"key": "type",
											"value": "system"
										},
										{
											"key": "version",
											"value": "latest"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "HEAD Agents/Update(ubuntu_x64)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											" \r",
											"  pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"     pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response must be with Body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"response must be json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"  pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"ubuntu_x64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"system\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"0.4.189\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "HEAD",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"os\" : \"ubuntu_x64\",\r\n    \"type\" : \"system\",\r\n    \"version\" : \"0.4.189\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/update?os=ubuntu_x64&type=system&version=0.4.189",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"update"
									],
									"query": [
										{
											"key": "os",
											"value": "ubuntu_x64"
										},
										{
											"key": "type",
											"value": "system"
										},
										{
											"key": "version",
											"value": "0.4.189"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "HEAD Agent/Update(rhel8_x64)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"rhel8_x64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"system\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"latest\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "HEAD",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"os\" : \"rhel8_x64\",\r\n    \"type\" : \"system\",\r\n    \"version\" : \"latest\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/update?os=rhel8_x64&type=system&version=latest",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"update"
									],
									"query": [
										{
											"key": "os",
											"value": "rhel8_x64"
										},
										{
											"key": "type",
											"value": "system"
										},
										{
											"key": "version",
											"value": "latest"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Agents By limit = 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"limit\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches integer not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().limit).to.eql(pm.environment.get(\"limit\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.limit).to.be.an(\"integer\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains limit\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"limit\", 5);\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?limit=5",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Agents By limit = 105",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"limit\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches integer not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().limit).to.eql(pm.environment.get(\"limit\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.limit).to.be.an(\"integer\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains limit\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"limit\", 105);\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?limit=105",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "limit",
											"value": "105"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Agents By limit = 5 /offset = 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"limit\");\r",
											"    pm.expect(pm.response.text()).to.include(\"offset\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches integer not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().limit).to.eql(pm.environment.get(\"limit\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().offset).to.eql(pm.environment.get(\"offset\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.limit).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.offset).to.be.an(\"integer\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains limit\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"limit\", 5);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains offset\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"offset\", 5);\r",
											"});\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?limit=5&offset=5",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "offset",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Agents By limit = 30/offset = 30",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"limit\");\r",
											"    pm.expect(pm.response.text()).to.include(\"offset\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches integer not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().limit).to.eql(pm.environment.get(\"limit\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().offset).to.eql(pm.environment.get(\"offset\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.limit).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.offset).to.be.an(\"integer\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains limit\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"limit\", 30);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains offset\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"offset\", 30);\r",
											"});\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?limit=30&offset=30",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "offset",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Agents/{uid}(status=offline)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											" \r",
											"  pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"     pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response must be with Body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"response must be json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"  pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.machine_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"offline\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"0.4.250\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_id\", \"имеющийся\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"status\" : \"offline\",\r\n    \"version\" : \"0.4.250\",\r\n    \"machine_id\" : \"имеющийся\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&status=offline",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "status",
											"value": "offline"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Agents/{uid}(status=archived)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											" \r",
											"  pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"     pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response must be with Body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"response must be json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"  pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.machine_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"archived\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"0.4.202\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_id\", \"имеющийся\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"status\" : \"archived\",\r\n    \"version\" : \"0.4.202\",\r\n    \"machine_id\" : \"имеющийся\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&status=archived",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "status",
											"value": "archived"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "tag",
					"item": [
						{
							"name": "GET tag(name=цифровое)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"})\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"цифровое\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT tag/{uid}(name=цифровое, description=кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().description).to.eql(pm.environment.get(\"description\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.description).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains description\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"description\", \"кириллица\");\r",
											"})\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"цифровое\",\r\n  \"description\": \"кириллица\",\r\n  \"color\": \"\",\r\n  \"priority\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE tag/{uid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 204\", function () {\r",
											"pm.response.to.have.status(204);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"No Content\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    })\r",
											"\r",
											"\r",
											"}\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/da5bd4ca-4cf6-4919-b632-1f7b6fd3716e",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										"da5bd4ca-4cf6-4919-b632-1f7b6fd3716e"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET tag(name=кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"кириллица\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags?name=кириллица",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags"
									],
									"query": [
										{
											"key": "name",
											"value": "кириллица"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET tag(name = латиница)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"латиница\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags?name=латиница",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags"
									],
									"query": [
										{
											"key": "name",
											"value": "латиница"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST tag(name=null(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"null(ошибка)\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"null(ошибка)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/?name=null (ошибка)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "null (ошибка)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST tag(name=цифровое)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"цифровое\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/?name=цифровое",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "цифровое"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST tag(name = латиница и кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody\r",
											"    (\"name\", \"латиница\");\r",
											"    pm.response.to.have.jsonBody\r",
											"    (\"name\", \"кириллица\");\r",
											"\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"латиница\",\r\n    \"name\" : \"кириллица\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/?name=латиница&name=кириллца",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "латиница"
										},
										{
											"key": "name",
											"value": "кириллца"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST tag(description)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().description).to.eql(pm.environment.get(\"description\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.description).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains description\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"description\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "",
											"type": "text"
										},
										{
											"key": "descriprion",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags?description&name",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags"
									],
									"query": [
										{
											"key": "description",
											"value": ""
										},
										{
											"key": "name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST tag(color)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"color\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().color).to.eql(pm.environment.get(\"color\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.color).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains color\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"color\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "color",
											"value": "",
											"type": "text"
										},
										{
											"key": "name",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags?color&name",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags"
									],
									"query": [
										{
											"key": "color",
											"value": ""
										},
										{
											"key": "name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST tag(priority)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"priority\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().priority).to.eql(pm.environment.get(\"priority\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.priority).to.be.an(\"integer\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains priority\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"priority\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "priority",
											"value": "",
											"type": "text"
										},
										{
											"key": "name",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags?priority&name",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags"
									],
									"query": [
										{
											"key": "priority",
											"value": ""
										},
										{
											"key": "name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST tag(name=цифровое, description=кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Сreated\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().description).to.eql(pm.environment.get(\"description\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.description).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains description\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"description\", \"кириллица\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"цифровое\",\r\n    \"description\" : \"кириллица\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/?name=цифровое&description=кириллица",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "цифровое"
										},
										{
											"key": "description",
											"value": "кириллица"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST tag(name=кириллица, color=цифровое)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Сreated\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"color\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().color).to.eql(pm.environment.get(\"color\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.color).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains color\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"color\", \"цифровое\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"кириллица\",\r\n    \"color\" : \"цифровое\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/?name=кириллица&color=цифровое",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "кириллица"
										},
										{
											"key": "color",
											"value": "цифровое"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST tag(name=латиница, priority=0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Сreated\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"   pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"priority\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().priority).to.eql(pm.environment.get(\"priority\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.priority).to.be.an(\"integer\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains priority\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"priority\", 0);\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"латиница\",\r\n    \"priority\" : 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/?name=латиница&priority=0",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "латиница"
										},
										{
											"key": "priority",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST tag(name=цифровое, description=латиница, color=кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Сreated\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"color\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().description).to.eql(pm.environment.get(\"description\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().color).to.eql(pm.environment.get(\"color\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.description).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.color).to.be.an(\"integer\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains description\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"description\", \"латиница\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains color\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"color\", \"кириллица\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"цифровое\",\r\n    \"description\" : \"латиница\",\r\n    \"color\" : \"кириллица\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/?name=цифровое&description=латиница&color=кириллица",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "цифровое"
										},
										{
											"key": "description",
											"value": "латиница"
										},
										{
											"key": "color",
											"value": "кириллица"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST tag(name=кириллица, description=кириллица, priority=1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Сreated\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"priority\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().description).to.eql(pm.environment.get(\"description\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().priority).to.eql(pm.environment.get(\"priority\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.description).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.priority).to.be.an(\"integer\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains description\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"description\", \"кириллица\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains priority\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"priority\", 1);\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"кириллица\",\r\n    \"description\" : \"кириллица\",\r\n    \"priority\" : 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/?name=кириллица&description=кириллица&priority=1",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "кириллица"
										},
										{
											"key": "description",
											"value": "кириллица"
										},
										{
											"key": "priority",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST tag(name=латиница, description=цифровое, priority=15, color=латиница)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Сreated\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"priority\");\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"color\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().description).to.eql(pm.environment.get(\"description\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().priority).to.eql(pm.environment.get(\"priority\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().color).to.eql(pm.environment.get(\"color\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.description).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.priority).to.be.an(\"integer\");\r",
											"   pm.expect(jsonData.colorn).to.be.a(\"string\");\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains description\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"description\", \"цифровое\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains priority\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"priority\", 15);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains color\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"color\", \"латиница\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"латиница\",\r\n    \"description\" : \"цифровое\",\r\n    \"priority\" : 15,\r\n    \"color\" : \"латиница\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/?name=латиница&description=цифровое&priority=15&color=латиница",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "латиница"
										},
										{
											"key": "description",
											"value": "цифровое"
										},
										{
											"key": "priority",
											"value": "15"
										},
										{
											"key": "color",
											"value": "латиница"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT tag/{uid}(name=null(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"null(ошибка)\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"null(ошибка)\",\r\n  \"description\": \"\",\r\n  \"color\": \"\",\r\n  \"priority\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT tag/{uid}(name=цифровое)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"цифровое\",\r\n  \"description\": \"\",\r\n  \"color\": \"\",\r\n  \"priority\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT tag/{uid}(name=латиница)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"латиница\",\r\n  \"description\": \"\",\r\n  \"color\": \"\",\r\n  \"priority\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT tag/{uid}(name=кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"кириллица\",\r\n  \"description\": \"\",\r\n  \"color\": \"\",\r\n  \"priority\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT tag/{uid}(name=кириллица, color=цифровое)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"color\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().color).to.eql(pm.environment.get(\"color\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.color).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains color\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"color\", \"цифровое\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"кириллица\",\r\n  \"description\": \"\",\r\n  \"color\": \"цифровое\",\r\n  \"priority\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT tag/{uid}(name=латиница, priority=0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"   pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"priority\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().priority).to.eql(pm.environment.get(\"priority\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.priority).to.be.an(\"integer\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains priority\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"priority\", 0);\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"латиница\",\r\n  \"description\": \"\",\r\n  \"color\": \"\",\r\n  \"priority\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT tag/{uid}(name=цифровое, description=латиница, color=кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"color\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().description).to.eql(pm.environment.get(\"description\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().color).to.eql(pm.environment.get(\"color\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.description).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.color).to.be.an(\"integer\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains description\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"description\", \"латиница\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains color\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"color\", \"кириллица\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"цифровое\",\r\n  \"description\": \"латиница\",\r\n  \"color\": \"кириллица\",\r\n  \"priority\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT tag/{uid}(name=кириллица, description=кириллица, priority=1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"priority\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().description).to.eql(pm.environment.get(\"description\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().priority).to.eql(pm.environment.get(\"priority\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.description).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.priority).to.be.an(\"integer\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains description\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"description\", \"кириллица\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains priority\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"priority\", 1);\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"кириллица\",\r\n  \"description\": \"кириллица\",\r\n  \"color\": \"\",\r\n  \"priority\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT tag/{uid}(name=латиница, description=цифровое, priority=15, color=латиница)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"priority\");\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"color\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().description).to.eql(pm.environment.get(\"description\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().priority).to.eql(pm.environment.get(\"priority\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().color).to.eql(pm.environment.get(\"color\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.description).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.priority).to.be.an(\"integer\");\r",
											"   pm.expect(jsonData.colorn).to.be.a(\"string\");\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains description\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"description\", \"цифровое\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains priority\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"priority\", 15);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains color\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"color\", \"латиница\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"латиница\",\r\n  \"description\": \"цифровое\",\r\n  \"color\": \"латиница\",\r\n  \"priority\": 15\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET tag/{uid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"priority\");\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"color\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().description).to.eql(pm.environment.get(\"description\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().priority).to.eql(pm.environment.get(\"priority\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().color).to.eql(pm.environment.get(\"color\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.description).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.priority).to.be.an(\"integer\");\r",
											"   pm.expect(jsonData.colorn).to.be.a(\"string\");\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains description\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"description\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains priority\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"priority\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains color\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"color\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/tags/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"tags",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "org-unit",
					"item": [
						{
							"name": "GET org-unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET org-unit/{uid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE org-unit/{uid}",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"3fa85f64-5717-4562-b3fc-2c963f66afa6"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST org-unit(name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parent_id\": \"4a59f5ac-e400-4f24-bc55-620cf706dd54\",\r\n  \"type\": \"organization\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST org-unit(parent_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parent_id\": \"\",\r\n  \"type\": \"organization\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST org-unit(name и parent_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parent_id\": \"4a59f5ac-e400-4f24-bc55-620cf706dd54\",\r\n  \"type\": \"organization\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST org-unit(type)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parent_id\": \"\",\r\n  \"type\": \"\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST org-unit(name=буквенный, type=organization)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"буквенный\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"organization\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"буквенный\",\r\n    \"type\" : \"organization\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST org-unit(name=цифровой, type=department)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"department\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"цифровое\",\r\n    \"type\" : \"department\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST org-unit(name=null(некорректное значение),type=department)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"null(некорректное значение)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"department\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"null(некорректное значение)\",\r\n    \"type\" : \"department\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST org-unit(name, type=group)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"group(некорректное значение)\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"group\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST org-unit(name, type=null(некорректоное значение)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"null(некорректное значение)\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parent_id\": \"\",\r\n  \"type\": \"null(некорректное значение)\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units?name&type=null(некорректное значение)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units"
									],
									"query": [
										{
											"key": "name",
											"value": null
										},
										{
											"key": "type",
											"value": "null(некорректное значение)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST org-unit(name, parent_id, type=organization)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"organization\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parent_id\": \"\",\r\n  \"type\": \"organization\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST org-unit(name, parent_id, type=department)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"department\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parent_id\": \"\",\r\n  \"type\": \"department\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit/{uid}(name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parent_id\": \"4a59f5ac-e400-4f24-bc55-620cf706dd54\",\r\n  \"type\": \"organization\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit/{uid}(parent_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parent_id\": \"\",\r\n  \"type\": \"organization\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit(type=department)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"department\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parent_id\": \"\",\r\n  \"type\": \"department\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit/{uid}(type=organization)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"organization\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parent_id\": \"\",\r\n  \"type\": \"organization\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit/{uid}(type=group(некорректное значение)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"group(некорректное значение\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parent_id\": \"\",\r\n  \"type\": \"group(некоррекное значение)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit/{uid}(type=department, parent_id=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"department\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"null\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parent_id\": \"null\",\r\n  \"type\": \"department\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit/{uid}(type=department, parent_id=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"department\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"НЕnull\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\" : \"department\",\r\n    \"parent_id\" : \"НЕnull\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit/{uid}(type=null(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"null(ошибка)\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\" : \"null(ошибка)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit/{uid}(name и parent_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"\",\r\n    \"parent_id\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit/{uid}(name=буквенный, type=organization)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"буквенный\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"organization\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"буквенный\",\r\n    \"type\" : \"organization\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54\n",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54\n"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit/{uid}(name=цифровое, type=department)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"department\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"цифровое\",\r\n    \"type\" : \"department\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit/{uid}(name=null, type=department)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"null\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"department\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"null\",\r\n    \"type\" : \"department\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit/{uid}(parent_id=null, type=organization)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"null\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"organization\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"parent_id\" : \"null\",\r\n    \"type\" : \"organization\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit/{uid}(parent_id=существующий id org-unit, type=organization)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  \r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"существующий id org-unit\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"organization\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"parent_id\" : \"существующий id org-unit\",\r\n    \"type\" : \"organization\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT org-unit/{uid}(parent_id=НЕсуществующий id org-unit, type=organization)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"НЕсуществующий id org-unit\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"organization\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"parent_id\" : \"НЕсуществующий id org-unit\",\r\n    \"type\" : \"organization\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/org-units/4a59f5ac-e400-4f24-bc55-620cf706dd54",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"org-units",
										"4a59f5ac-e400-4f24-bc55-620cf706dd54"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "location",
					"item": [
						{
							"name": "GET locations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET locations/{uid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations/20c060d4-fd7b-4b59-9344-98d00d3835ae",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations",
										"20c060d4-fd7b-4b59-9344-98d00d3835ae"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE locations/{uid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 204\", function () {\r",
											"pm.response.to.have.status(204);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"No Content\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    })\r",
											"\r",
											"\r",
											"}\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations/20c060d4-fd7b-4b59-9344-98d00d3835ae",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations",
										"20c060d4-fd7b-4b59-9344-98d00d3835ae"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST locations(parent_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parent_id\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST locations(name=null(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"null(ошибка)\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"null(ошибка)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations?name=null(ошибка)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations"
									],
									"query": [
										{
											"key": "name",
											"value": "null(ошибка)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST locations(name=цифровое)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"цифровое\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST locations(name=кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"кириллица\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST locations(name=латиница)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"латиница\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST locations(name=кириллица, parent_id=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", null);\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"parent_id\" : null,\r\n    \"name\" : \"кириллица\"\r\n \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST locations(name=null, parent_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", null);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"корректный id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : null,\r\n    \"parent_id\" : \"корректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST locations(name=цифровое, parent_id=НЕкорректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"НЕкорректный id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"цифровое\",\r\n    \"parent_id\" : \"НЕкорректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST locations(name=латиница, parent_id=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", null);\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"латиница\",\r\n    \"parent_id\" : null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT locations/{uid}(name=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"null(ошибка)\");\r",
											"})\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"null(ошибка)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations/05d9fe67-2743-4591-bb75-089af036defe",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations",
										"05d9fe67-2743-4591-bb75-089af036defe"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT locations/{uid}(name=латиница)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"латиница\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations/20c060d4-fd7b-4b59-9344-98d00d3835ae",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations",
										"20c060d4-fd7b-4b59-9344-98d00d3835ae"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT locations/{uid}(name=цифровое)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"цифровое\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations/3470c49a-2895-42f7-8bd5-88cd5f022f0c",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations",
										"3470c49a-2895-42f7-8bd5-88cd5f022f0c"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT locations/{uid}(name=латиница, parent_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"корректный id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"латиница\",\r\n    \"parent_id\" : \"20c060d4-fd7b-4b59-9344-98d00d3835ae\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations/20c060d4-fd7b-4b59-9344-98d00d3835ae",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations",
										"20c060d4-fd7b-4b59-9344-98d00d3835ae"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT locations/{uid}(name=null, parent_id=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", null);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", null);\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : null,\r\n    \"parent_id\" : null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations/05d9fe67-2743-4591-bb75-089af036defe",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations",
										"05d9fe67-2743-4591-bb75-089af036defe"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT locations/{uid}(name=цифровое, parent_id=НЕкорректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"НЕкорректный id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"цифровое\",\r\n    \"parent_id\" : \"20c060d4-fd7b-4b59-9344-98d00d3835ae\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations/3470c49a-2895-42f7-8bd5-88cd5f022f0c",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations",
										"3470c49a-2895-42f7-8bd5-88cd5f022f0c"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT locations/{uid}(name=цифровое, parent_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"корректный id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"цифровое\",\r\n    \"parent_id\" : \"3470c49a-2895-42f7-8bd5-88cd5f022f0c\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations/3470c49a-2895-42f7-8bd5-88cd5f022f0c",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations",
										"3470c49a-2895-42f7-8bd5-88cd5f022f0c"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET locations/{uid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations/05d9fe67-2743-4591-bb75-089af036defe",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations",
										"05d9fe67-2743-4591-bb75-089af036defe"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET locations/{uid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/locations/3470c49a-2895-42f7-8bd5-88cd5f022f0c",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"locations",
										"3470c49a-2895-42f7-8bd5-88cd5f022f0c"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "package",
					"item": [
						{
							"name": "GET packages(location_id=пустой, ou_id=один корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"один корректный id\");\r",
											"})\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"location_id\" : \"\",\r\n    \"ou_id\" : \"один корректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/?location_id&ou_id=один корректный id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										""
									],
									"query": [
										{
											"key": "location_id",
											"value": ""
										},
										{
											"key": "ou_id",
											"value": "один корректный id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET packages(location_id=один корректный id, ou_id=один НЕкорректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"один корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"один НЕкорректный id\");\r",
											"})\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"location_id\" : \"один корректный id\",\r\n    \"ou_id\" : \"один НЕкорректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/?location_id=корректный id&ou_id=один НЕкорректный id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										""
									],
									"query": [
										{
											"key": "location_id",
											"value": "корректный id"
										},
										{
											"key": "ou_id",
											"value": "один НЕкорректный id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET packages(location_id=один НЕкорректный id, ou_id=пустой)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"один НЕкорректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"\");\r",
											"})\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"location_id\" : \"один НЕкорректный id\",\r\n    \"ou_id\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/?location_id=один НЕкорректный id&ou_id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										""
									],
									"query": [
										{
											"key": "location_id",
											"value": "один НЕкорректный id"
										},
										{
											"key": "ou_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET packages(location_id=три корректных id, ou_id=три корректных id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"три корректных id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"три корректных id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"location_id\" : \"три корректных id\",\r\n    \"ou_id\" : \"три корректных id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/?location_id=три корректных id&ou_id=три корректных id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										""
									],
									"query": [
										{
											"key": "location_id",
											"value": "три корректных id"
										},
										{
											"key": "ou_id",
											"value": "три корректных id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=null(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"pm.response.to.have.status(422);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"null(ошибка)\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"null(ошибка)\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"кириллица\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=цифровое)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"цифровое\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=латиница)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"латиница\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(location_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"location_id\": \"\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(ou_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ou_id\": \"\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=пустой, location_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"location_id\": \"05d9fe67-2743-4591-bb75-089af036defe\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=пустой, location_id=НЕкорректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_name\", \"НЕкорректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"location_id\": \"#0c060d4-fd7b-4b59-9344-98d00d3835ae\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=цифровое, location_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_name).to.eql(pm.environment.get(\"location_name\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_name\", \"корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"цифровое\",\r\n  \"location_id\": \"0c060d4-fd7b-4b59-9344-98d00d3835ae\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=латиница, location_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"латиница\",\r\n  \"location_id\": \"0c060d4-fd7b-4b59-9344-98d00d3835ae\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=кириллица, location_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"кириллица\",\r\n  \"location_id\": \"0c060d4-fd7b-4b59-9344-98d00d3835ae\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=null(ошибка), location_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"null(ошибка)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"null(ошибка)\",\r\n  \"location_id\": \"0c060d4-fd7b-4b59-9344-98d00d3835ae\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=пустой, ou_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"ou_id\": \"05d9fe67-2743-4591-bb75-089af036defe\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=пустой, ou_id=НЕкорректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"НЕкорректный id\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"ou_id\": \"#05d9fe67-2743-4591-bb75-089af036defe\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=цифровое, ou_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"цфровое\",\r\n  \"ou_id\": \"05d9fe67-2743-4591-bb75-089af036defe\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=латиница, ou_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"латиница\",\r\n  \"ou_id\": \"05d9fe67-2743-4591-bb75-089af036defe\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=кириллица, ou_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"кириллица\",\r\n  \"ou_id\": \"05d9fe67-2743-4591-bb75-089af036defe\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST packages(name=null, ou_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"null(ошибка)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"null(ошибка)\",\r\n  \"ou_id\": \"05d9fe67-2743-4591-bb75-089af036defe\",\r\n  \"config\": {\r\n    \"mainSettings\": {\r\n      \"urlPostCsrAndReceiveClientCert\": \"https://dev3.u-system.tech/api/v1/agents/register\"\r\n    },\r\n    \"remote_server\": {\r\n      \"address\": \"https://dev3.u-system.tech/\",\r\n      \"wsaddress\": \"wss://dev3.u-system.tech/sub\"\r\n    },\r\n    \"remoteAccess\": {\r\n      \"enabled\": false,\r\n      \"globalAddress\": \"dev3.u-system.tech\",\r\n      \"globalPort\": \"4444\",\r\n      \"localPort\": \"6001\"\r\n    },\r\n    \"sentry\": {\r\n      \"enabled\": true,\r\n      \"httpLogPath\": \"https://0229dea89cb84318a272e552318b0d03@sentry.it2c.ru/5\"\r\n    },\r\n    \"log\": {\r\n      \"level\": \"trace\"\r\n    },\r\n    \"syslog\": {\r\n      \"level\": \"warning\",\r\n      \"host\": \"dev3.u-system.tech\",\r\n      \"port\": 10514\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT packages/{uid}(location_id и ou_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"uid\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\");\r",
											"})\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"location_id\": \"05d9fe67-2743-4591-bb75-089af036defe\",\r\n  \"ou_id\": \"05d9fe67-2743-4591-bb75-089af036defe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT packages/{uid}(name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"uid\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT packages/{uid}(name=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"uid\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"null\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"null\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET packages/{uid}/agents(uid=корректный id, version=пустой, os=rhel8_x64, type=system(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"rhel8_x64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"system(ошибка)\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"version\" : \"\",\r\n    \"os\" : \"rhel8_x64\",\r\n    \"type\" : \"system(ошибка)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/05d9fe67-2743-4591-bb75-089af036defe",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										"05d9fe67-2743-4591-bb75-089af036defe"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET packages/{uid}/agents(uid=пустой, version=0.4.242, os=rhel8_x64, type=user(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"0.4.242\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"rhel8_x64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"user(ошибка)\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"version\" : \"0.4.242\",\r\n    \"os\" : \"rhel8_x64\",\r\n    \"type\" : \"user(ошибка)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/05d9fe67-2743-4591-bb75-089af036defe\n",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										"05d9fe67-2743-4591-bb75-089af036defe\n"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET packages/{uid}/agents(uid=корректный id, version=0.4.242, os=пустой, type=user(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"0.4.242\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"system(ошибка)\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"version\" : \"0.4.242\",\r\n    \"os\" : \"\",\r\n    \"type\" : \"system(ошибка)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/05d9fe67-2743-4591-bb75-089af036defe",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										"05d9fe67-2743-4591-bb75-089af036defe"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET packages/{uid}/agents(uid=корректный id, version=0.4.242, os=windows_x86, type=user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"0.4.242\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"windows_x86\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"user\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"version\" : \"0.4.242\",\r\n    \"os\" : \"windows_x86\",\r\n    \"type\" : \"user\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/05d9fe67-2743-4591-bb75-089af036defe",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										"05d9fe67-2743-4591-bb75-089af036defe"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET packages/{uid}/agents(uid=НЕкорректный id, version=0.4.242, os=rhel8_x64, type=system(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"0.4.242\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"rhel8_x64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"system(ошибка)\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"version\" : \"0.4.242\",\r\n    \"os\" : \"rhel8_x64\",\r\n    \"type\" : \"system(ошибка)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/05d9fe67-2743-4591-bb75-089af036defe",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										"05d9fe67-2743-4591-bb75-089af036defe"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET packages/{uid}/agents(uid=корректный id, version=0.4.242, os=ubuntu_x64, type=system)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"0.4.242\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"ubuntu_x64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"system\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"version\" : \"0.4.242\",\r\n    \"os\" : \"ubuntu_x64\",\r\n    \"type\" : \"system\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/05d9fe67-2743-4591-bb75-089af036defe",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										"05d9fe67-2743-4591-bb75-089af036defe"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET packages/{uid}/agents(uid=НЕкорректный id, version=0.4.242, os=windows_x64, type=system)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"0.4.242\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"windows_x64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"system\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"version\" : \"0.4.242\",\r\n    \"os\" : \"windows_x64\",\r\n    \"type\" : \"system\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/05d9fe67-2743-4591-bb75-089af036defe",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										"05d9fe67-2743-4591-bb75-089af036defe"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET packages/{uid}/agents(uid=корректный id, version=0.4.242, os=astra_x64, type=system)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"0.4.242\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"astra_x64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"system\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"version\" : \"0.4.242\",\r\n    \"os\" : \"astra_x64\",\r\n    \"type\" : \"system\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/05d9fe67-2743-4591-bb75-089af036defe",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										"05d9fe67-2743-4591-bb75-089af036defe"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET packages/{uid}/agents(uid=НЕкорректный id, version=0.4.242, os=rhel7_x64, type=system)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.version).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.os).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"uid\", \"НЕкорректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"version\", \"0.4.242\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains os\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"os\", \"rhel7_x64\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"system\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"version\" : \"0.4.242\",\r\n    \"os\" : \"rhel7_x64\",\r\n    \"type\" : \"system\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/05d9fe67-2743-4591-bb75-089af036defe",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										"05d9fe67-2743-4591-bb75-089af036defe"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET packages(type=user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											" \r",
											"  pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"     pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response must be with Body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"response must be json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"  pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.os).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.version).to.be.an(\"array\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\" : \"user\",\r\n    \"os\" : {\r\n        \"type\" : \"array\",\r\n        \"minItems\" : 1,\r\n        \"maxItems\" : 2,\r\n        \"os\" : {\"type\" : \"string\"}\r\n    },\r\n    \"required\" :[\"windows_x64\",\"windows_x86\"],\r\n\r\n    \"version\" :  {\r\n        \"type\" : \"array\",\r\n        \"minItems\" : 1,\r\n        \"maxItems\" : 32,\r\n        \"version\" : {\"type\" : \"string\"}\r\n    },\r\n    \"required\" : [\"0.4.180\",\"0.4.186\",\"0.4.189\",\"0.4.199\",\"0.4.203\",\"0.4.234\", \"0.4.257\",\"0.4.258\",\"0.4.259\",\"0.4.260\",\"0.4.261\",\"0.4.262\",\"0.4.263\",\"0.4.264\",\"0.4.265\",\"0.4.266\",\"0.4.267\",\"0.4.268\",\"0.4.269\",\"0.4.270\",\"0.4.271\",\"0.4.272\",\"0.4.273\",\"0.4.274\",\"0.4.275\",\"0.4.276\",\"0.4.277\",\"0.4.278\",\"0.4.279\",\"0.4.280\",\"0.4.281\",\"0.4.282\"]\r\n\r\n    }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/agent/versions\n",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										"agent",
										"versions\n"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET packages(type=system)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											" \r",
											"  pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"     pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response must be with Body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"response must be json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"  pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"version\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"pm.expect(pm.response.json().version).to.eql(pm.environment.get(\"version\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.os).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.version).to.be.an(\"array\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\" : \"system\",\r\n    \"os\" : {\r\n        \"type\" : \"array\",\r\n        \"minItems\" : 1,\r\n        \"maxItems\" : 6,\r\n        \"os\" : {\"type\" : \"string\"}\r\n    },\r\n    \"required\" : [\"windows_x64\",\"rhel8_x64\",\"windows_x86\",\"rhel7_x64\",\"astra_x64\",\"ubuntu_x64\"],\r\n\r\n    \"version\" :  {\r\n        \"type\" : \"array\",\r\n        \"minItems\" : 1,\r\n        \"maxItems\" : 32,\r\n        \"version\" : {\"type\" : \"string\"}\r\n    },\r\n    \"required\" : [\"0.4.180\",\"0.4.186\",\"0.4.189\",\"0.4.199\",\"0.4.203\",\"0.4.234\", \"0.4.257\",\"0.4.258\",\"0.4.259\",\"0.4.260\",\"0.4.261\",\"0.4.262\",\"0.4.263\",\"0.4.264\",\"0.4.265\",\"0.4.266\",\"0.4.267\",\"0.4.268\",\"0.4.269\",\"0.4.270\",\"0.4.271\",\"0.4.272\",\"0.4.273\",\"0.4.274\",\"0.4.275\",\"0.4.276\",\"0.4.277\",\"0.4.278\",\"0.4.279\",\"0.4.280\",\"0.4.281\",\"0.4.282\"]\r\n\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/packages/agent/versions\n",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"packages",
										"agent",
										"versions\n"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "vendors",
					"item": [
						{
							"name": "GET vendors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/vendors",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST vendors(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"pm.response.to.have.status(422);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", null);\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/vendors",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST vendors(name=пустой)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"pm.response.to.have.status(500);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/vendors",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST vendors(name=латиница)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"латиница\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/vendors",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST vendors(name=кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"кириллица\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/vendors",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST vendors(name=цифровое)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"цифровое\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/vendors",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT vendors/{uid}(name=кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"кириллица\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/vendors/57b46866-42f9-45c1-b45b-4b2650219e68",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"vendors",
										"57b46866-42f9-45c1-b45b-4b2650219e68"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT vendors/{uid}(name=латиница)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"латиница\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/vendors/dd0f0041-4c8b-4dbe-871e-9153543601f5",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"vendors",
										"dd0f0041-4c8b-4dbe-871e-9153543601f5"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT vendors/{uid}(name=цифровое)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"цифровое\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/vendors/c5a8afab-e5f1-487d-8719-ad97475011a3",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"vendors",
										"c5a8afab-e5f1-487d-8719-ad97475011a3"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET vendors/{uid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/vendors/57b46866-42f9-45c1-b45b-4b2650219e68",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"vendors",
										"57b46866-42f9-45c1-b45b-4b2650219e68"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET vendors/{uid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/vendors/dd0f0041-4c8b-4dbe-871e-9153543601f5",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"vendors",
										"dd0f0041-4c8b-4dbe-871e-9153543601f5"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET vendors/{uid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/vendors/c5a8afab-e5f1-487d-8719-ad97475011a3",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"vendors",
										"c5a8afab-e5f1-487d-8719-ad97475011a3"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE vendors/{uid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 204\", function () {\r",
											"pm.response.to.have.status(204);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"No Content\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    })\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/vendors/57b46866-42f9-45c1-b45b-4b2650219e68",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"vendors",
										"57b46866-42f9-45c1-b45b-4b2650219e68"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "monitoring",
					"item": [
						{
							"name": "GET monitoring/system/{uid}/latest(source=base положительный тест)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().source).to.eql(pm.environment.get(\"source\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.source).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains source\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"source\", \"base\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"source\" : \"base\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/monitoring/system/3fa85f64-5717-4562-b3fc-2c963f66afa6/latest?source=base\n",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"monitoring",
										"system",
										"3fa85f64-5717-4562-b3fc-2c963f66afa6",
										"latest"
									],
									"query": [
										{
											"key": "source",
											"value": "base\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET monitoring/system/{uid}/latest(source=base отрицательный тест)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().source).to.eql(pm.environment.get(\"source\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.source).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains source\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"source\", \"НЕbase\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"source\" : \"НЕbase\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/monitoring/system/3fa85f64-5717-4562-b3fc-2c963f66afa6/latest?source=НЕbase\n",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"monitoring",
										"system",
										"3fa85f64-5717-4562-b3fc-2c963f66afa6",
										"latest"
									],
									"query": [
										{
											"key": "source",
											"value": "НЕbase\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET monitoring/system/{uid}/latest(source=vmware положительный тест)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().source).to.eql(pm.environment.get(\"source\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.source).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains source\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"source\", \"vmware\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"source\" : \"vmware\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/monitoring/system/3fa85f64-5717-4562-b3fc-2c963f66afa6/latest?source=vmware\n",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"monitoring",
										"system",
										"3fa85f64-5717-4562-b3fc-2c963f66afa6",
										"latest"
									],
									"query": [
										{
											"key": "source",
											"value": "vmware\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET monitoring/system/{uid}/latest(source=vmware отрицательный тест)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().source).to.eql(pm.environment.get(\"source\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.source).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains source\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"source\", \"НЕvmware\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"source\" : \"НЕvmware\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/monitoring/system/3fa85f64-5717-4562-b3fc-2c963f66afa6/latest?source=НЕvmware\n",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"monitoring",
										"system",
										"3fa85f64-5717-4562-b3fc-2c963f66afa6",
										"latest"
									],
									"query": [
										{
											"key": "source",
											"value": "НЕvmware\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET monitoring/system/latest {uid}(source=hyperv положительный  тест)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().source).to.eql(pm.environment.get(\"source\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.source).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains source\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"source\", \"hyperv\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"source\" : \"hyperv\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/monitoring/system/3fa85f64-5717-4562-b3fc-2c963f66afa6/latest?source=hyperv",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"monitoring",
										"system",
										"3fa85f64-5717-4562-b3fc-2c963f66afa6",
										"latest"
									],
									"query": [
										{
											"key": "source",
											"value": "hyperv"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET monitoring/system/{uid}/latest(source=hyperv отрицательный тест)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().source).to.eql(pm.environment.get(\"source\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.source).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains source\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"source\", \"НЕhyperv\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"НЕкорректный id\",\r\n    \"source\" : \"hyperv\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/monitoring/system/3fa85f64-5717-4562-b3fc-2c963f66afa6/latest?source=НЕhyperv\n",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"monitoring",
										"system",
										"3fa85f64-5717-4562-b3fc-2c963f66afa6",
										"latest"
									],
									"query": [
										{
											"key": "source",
											"value": "НЕhyperv\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET monitoring/system/{uid}(source=base положительный тест)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"date_from\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"date_to\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().source).to.eql(pm.environment.get(\"source\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().date_from).to.eql(pm.environment.get(\"date_from\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().date_to).to.eql(pm.environment.get(\"date_to\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.source).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.date_from).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.date_to).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains source\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"source\", \"base\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains date_from\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"date_from\", \"2022-04-13T12:20:02.528000+00:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains date_to\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"date_to\", \"2022-04-13T12:20:02.528000+00:00\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"source\" : \"base\",\r\n    \"date_from\" : \"2022-04-13T12:20:02.528000+00:00\",\r\n    \"date_to\" : \"2022-04-13T12:20:02.528000+00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/monitoring/system/3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"monitoring",
										"system",
										"3fa85f64-5717-4562-b3fc-2c963f66afa6"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET monitoring/system/{uid}(source=base отрицательный тест)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"date_from\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"date_to\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().source).to.eql(pm.environment.get(\"source\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().date_from).to.eql(pm.environment.get(\"date_from\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().date_to).to.eql(pm.environment.get(\"date_to\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.source).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.date_from).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.date_to).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains source\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"source\", \"НЕbase\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains date_from\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"date_from\", \"2022-04-13T12:20:02.528000+00:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains date_to\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"date_to\", \"2022-04-13T12:20:02.528000+00:00\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"source\" : \"НЕbase\",\r\n    \"date_from\" : \"2022-04-13T12:20:02.528000+00:00\",\r\n    \"date_to\" : \"2022-04-13T12:20:02.528000+00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/monitoring/system/3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"monitoring",
										"system",
										"3fa85f64-5717-4562-b3fc-2c963f66afa6"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET  monitoring/system/{uid}(source=vmware положительный тест)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"date_from\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"date_to\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().source).to.eql(pm.environment.get(\"source\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().date_from).to.eql(pm.environment.get(\"date_from\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().date_to).to.eql(pm.environment.get(\"date_to\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.source).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.date_from).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.date_to).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains source\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"source\", \"vmware\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains date_from\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"date_from\", \"2022-04-13T12:20:02.528000+00:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains date_to\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"date_to\", \"2022-04-13T12:20:02.528000+00:00\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"source\" : \"vmware\",\r\n    \"date_from\" : \"2022-04-13T12:20:02.528000+00:00\",\r\n    \"date_to\" : \"2022-04-13T12:20:02.528000+00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/monitoring/system/3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"monitoring",
										"system",
										"3fa85f64-5717-4562-b3fc-2c963f66afa6"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET monitoring/system/{uid}(source=vmware отрицательный тест)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"date_from\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"date_to\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().source).to.eql(pm.environment.get(\"source\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().date_from).to.eql(pm.environment.get(\"date_from\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().date_to).to.eql(pm.environment.get(\"date_to\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.source).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.date_from).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.date_to).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains source\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"source\", \"НЕvmware\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains date_from\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"date_from\", \"2022-04-13T12:20:02.528000+00:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains date_to\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"date_to\", \"2022-04-13T12:20:02.528000+00:00\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"source\" : \"НЕvmware\",\r\n    \"date_from\" : \"2022-04-13T12:20:02.528000+00:00\",\r\n    \"date_to\" : \"2022-04-13T12:20:02.528000+00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/monitoring/system/3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"monitoring",
										"system",
										"3fa85f64-5717-4562-b3fc-2c963f66afa6"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET  monitoring/system/{uid}(source=hyperv положительный тест)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"date_from\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"date_to\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().source).to.eql(pm.environment.get(\"source\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().date_from).to.eql(pm.environment.get(\"date_from\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().date_to).to.eql(pm.environment.get(\"date_to\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.source).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.date_from).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.date_to).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains source\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"source\", \"hyperv\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains date_from\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"date_from\", \"2022-04-13T12:20:02.528000+00:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains date_to\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"date_to\", \"2022-04-13T12:20:02.528000+00:00\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"source\" : \"hyperv\",\r\n    \"date_from\" : \"2022-04-13T12:20:02.528000+00:00\",\r\n    \"date_to\" : \"2022-04-13T12:20:02.528000+00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/monitoring/system/3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"monitoring",
										"system",
										"3fa85f64-5717-4562-b3fc-2c963f66afa6"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET monitoring/system/{uid}(source=hyperv отрицательный тест)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"date_from\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"date_to\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().source).to.eql(pm.environment.get(\"source\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().date_from).to.eql(pm.environment.get(\"date_from\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().date_to).to.eql(pm.environment.get(\"date_to\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.source).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.date_from).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.date_to).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains source\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"source\", \"НЕhyperv\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains date_from\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"date_from\", \"2022-04-13T12:20:02.528000+00:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains date_to\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"date_to\", \"2022-04-13T12:20:02.528000+00:00\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"source\" : \"НЕhyperv\",\r\n    \"date_from\" : \"2022-04-13T12:20:02.528000+00:00\",\r\n    \"date_to\" : \"2022-04-13T12:20:02.528000+00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/monitoring/system/3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"monitoring",
										"system",
										"3fa85f64-5717-4562-b3fc-2c963f66afa6"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET monitoring/process/{endpoint_id}/latest(имеющийся endpoint_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  \r",
											"})\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/monitoring/process/3fa85f64-5717-4562-b3fc-2c963f66afa6/latest",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"monitoring",
										"process",
										"3fa85f64-5717-4562-b3fc-2c963f66afa6",
										"latest"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET monitoring/process/{endpoint_id}/latest(неимеющийся endpoint_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/monitoring/process/_3fa85f64-5717-4562-b3fc-2c963f66afa6/latest",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"monitoring",
										"process",
										"_3fa85f64-5717-4562-b3fc-2c963f66afa6",
										"latest"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "tasks",
					"item": [
						{
							"name": "GET agents/{agent_id}/tasks(name=имеющийся, periodic=true, active=true, enabled=true, status=Created)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"periodic\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"active\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"enabled\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().periodic).to.eql(pm.environment.get(\"periodic\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().active).to.eql(pm.environment.get(\"active\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().enabled).to.eql(pm.environment.get(\"enabled\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.periodic).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.active).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.enabled).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"имеющийся\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains periodic\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"periodic\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains active\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"active\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains enabled\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"enabled\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"Created\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n     \"name\" : \"имеющийся\",\r\n    \"periodic\" : true,\r\n    \"active\" : true,\r\n    \"enabled\" : true,\r\n    \"status\" : \"Created\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&name=имеющийся&periodic=true&active=true&enabled=true&status=Created",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "name",
											"value": "имеющийся"
										},
										{
											"key": "periodic",
											"value": "true"
										},
										{
											"key": "active",
											"value": "true"
										},
										{
											"key": "enabled",
											"value": "true"
										},
										{
											"key": "status",
											"value": "Created"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6&name",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET agents/{agent_id}/tasks(name=НЕимеющийся, periodic=false, active=false, enabled=true, status=Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"periodic\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"active\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"enabled\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().periodic).to.eql(pm.environment.get(\"periodic\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().active).to.eql(pm.environment.get(\"active\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().enabled).to.eql(pm.environment.get(\"enabled\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.periodic).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.active).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.enabled).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"НЕимеющийся\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains periodic\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"periodic\", false);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains active\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"active\", false);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains enabled\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"enabled\", false);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"Success\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"НЕимеющийся\",\r\n    \"periodic\" : false,\r\n    \"active\" : false,\r\n    \"enabled\" : false,\r\n    \"status\" : \"Success\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&periodic=false&active=false&enabled=false&status=Success",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "periodic",
											"value": "false"
										},
										{
											"key": "active",
											"value": "false"
										},
										{
											"key": "enabled",
											"value": "false"
										},
										{
											"key": "status",
											"value": "Success"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET agents/{agent_id}/tasks(name=имеющийся, periodic=true, active=false, enabled=true, status=Error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"periodic\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"active\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"enabled\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().periodic).to.eql(pm.environment.get(\"periodic\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().active).to.eql(pm.environment.get(\"active\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().enabled).to.eql(pm.environment.get(\"enabled\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.periodic).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.active).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.enabled).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"имеющийся\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains periodic\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"periodic\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains active\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"active\", false);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains enabled\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"enabled\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"Error\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"имеющийся\",\r\n    \"periodic\" : true,\r\n    \"active\" : false,\r\n    \"enabled\" : true,\r\n    \"status\" : \"Error\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&periodic=true&active=false&enabled=true&status=Error",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "periodic",
											"value": "true"
										},
										{
											"key": "active",
											"value": "false"
										},
										{
											"key": "enabled",
											"value": "true"
										},
										{
											"key": "status",
											"value": "Error"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(additionalParams)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additional_params\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().additional_params).to.eql(pm.environment.get(\"additional_params\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.additional_params).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains additionalParams\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"additional_params\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"additional_params\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&additional_params&name",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "additional_params",
											"value": ""
										},
										{
											"key": "name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(period)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"period\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().period).to.eql(pm.environment.get(\"period\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.period).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains period\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"period\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"period\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&period&name",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "period",
											"value": ""
										},
										{
											"key": "name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(run_as_user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"run_as_user\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().run_as_user).to.eql(pm.environment.get(\"run_as_user\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.run_as_user).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains run_as_user\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"run_as_user\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"run_as_user\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&run_as_user&name",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "run_as_user",
											"value": ""
										},
										{
											"key": "name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(name, additional_params={})",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additional_params\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().additional_params).to.eql(pm.environment.get(\"additional_params\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.additional_params).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains additional_params\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"additional_params\", \"{}\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"additional_params\" : \"{}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&name&additional_params={}",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "additional_params",
											"value": "{}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(name, additional_params={\"vmwareScriptUrlZip\", \"address\", \"port\", \"user\", \"pwd\"})",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additional_params\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vmwareScriptUrlZip\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"port\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"user\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"pwd\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().additional_params).to.eql(pm.environment.get(\"additional_params\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vmwareScriprUrlZip).to.eql(pm.environment.get(\"vmwareScriptUrlZip\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().address).to.eql(pm.environment.get(\"address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().port).to.eql(pm.environment.get(\"port\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().user).to.eql(pm.environment.get(\"user\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().pwd).to.eql(pm.environment.get(\"pwd\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.additional_params).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.vmwareScriprUrlZip).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.port).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.user).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.pwd).to.be.a(\"string\");\r",
											" \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains vmwareScriprUrlZip\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vmwareScriprUrlZip\", \"https://code.vmware.com/doc/preview?id=13693\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"address\", \"192.168.234.4\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains port\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"port\", \"443\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains user\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"user\", \"root\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains pwd\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"pwd\", \"ForAcc2020\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"additional_params\" : [{\r\n        \"vmwareScriptUrlZip\": \"https://code.vmware.com/doc/preview?id=13693\",\r\n        \"address\" : \"192.168.234.4\",\r\n        \"port\": \"443\",\r\n        \"user\": \"root\",\r\n        \"pwd\": \"ForAcc2020\"\r\n    }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&name&addtional_params={\"vmwareScriptUrlZip\": \"https://code.vmware.com/doc/preview?id=13693\", \"address\" : \"192.168.234.4\", \"port\": \"443\", \"user\": \"root\", \"pwd\": \"ForAcc2020\"}",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "addtional_params",
											"value": "{\"vmwareScriptUrlZip\": \"https://code.vmware.com/doc/preview?id=13693\", \"address\" : \"192.168.234.4\", \"port\": \"443\", \"user\": \"root\", \"pwd\": \"ForAcc2020\"}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(name, additional_params={\"if_names\", \"addtional_tcp_ports\"})",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additional_params\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"if_names\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additional_tcp_ports\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().additional_params).to.eql(pm.environment.get(\"additional_params\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().if_names).to.eql(pm.environment.get(\"if_names\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().additional_tcp_ports).to.eql(pm.environment.get(\"additional_tcp_ports\"));\r",
											"});\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.additional_params).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.if_names).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.additional_tcp_ports).to.be.an(\"array\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains if_names\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"if_names\", [\"ethernet_32769\"]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains additional_tcp_ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"additional_tcp_ports\", [631, 9100, 5001, 9102, 9101, 9103, 9600]);\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"additional_params\" : [{\r\n        \"if_names\": [\"ethernet_32769\"],\r\n        \"additional_tcp_ports\": [631, 9100, 5001, 9102, 9101, 9103, 9600]\r\n    }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&name&additional_params={\"if_names\": [\"ethernet_32769\"], \"additional_tcp_ports\": [631, 9100, 5001, 9102, 9101, 9103, 9600] }",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "additional_params",
											"value": "{\"if_names\": [\"ethernet_32769\"], \"additional_tcp_ports\": [631, 9100, 5001, 9102, 9101, 9103, 9600] }"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(name, period = 0(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"period\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().period).to.eql(pm.environment.get(\"period\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.period).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains period\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"period\", \"0(ошибка)\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"period\" : \"0(ошибка)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&name&period=0(ошибка)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "period",
											"value": "0(ошибка)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(name, period = от 1 до 10000)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"period\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().period).to.eql(pm.environment.get(\"period\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.period).to.be.an(\"array\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains period\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"period\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"period\" : {\r\n        \"type\" : \"array\",\r\n        \"minItems\" : 1,\r\n        \"maxItems\" : 10000,\r\n        \"period\" : {\"type\" : \"integer\"}\r\n}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&name&period=[1,...,10000]",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "period",
											"value": "[1,...,10000]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(name, period=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"period\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().period).to.eql(pm.environment.get(\"period\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.period).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains period\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"period\", \"null\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"period\" : \"null\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&name&period=null",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "period",
											"value": "null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(name, run_as_user=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"run_as_user\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().run_as_user).to.eql(pm.environment.get(\"run_as_user\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.run_as_user).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains run_as_user\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"run_as_user\", \"null\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"run_as_user\" : \"null\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&name&run_as_user=null",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "run_as_user",
											"value": "null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(name, run_as_user=корректное имя пользователя)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"run_as_user\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().run_as_user).to.eql(pm.environment.get(\"run_as_user\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.run_as_user).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains run_as_user\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"run_as_user\", \"корректное имя пользователя\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"run_as_user\" : \"корректное имя пользователя\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&name&run_as_user=корректное имя пользователя",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "run_as_user",
											"value": "корректное имя пользователя"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(name, run_as_user=НЕкорректное имя пользователя)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"run_as_user\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().run_as_user).to.eql(pm.environment.get(\"run_as_user\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.run_as_user).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains run_as_user\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"run_as_user\", \"НЕкорректное имя пользователя\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"run_as_user\" : \"НЕкорректное имя пользователя\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(name, start_ts=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"start_ts\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().start_ts).to.eql(pm.environment.get(\"start_ts\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.start_ts).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains start_ts\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"start_ts\", \"null\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"start_ts\" : \"null\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&name&start_ts=null",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "start_ts",
											"value": "null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(name, start_ts=дата=текущей)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"start_ts\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().start_ts).to.eql(pm.environment.get(\"start_ts\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.start_ts).to.be.an(\"array\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains start_ts\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"start_ts\", \"дата\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains start_ts\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"start_ts\", \"текущая дата\");\r",
											"});\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"type\" : \"object\", \r\n    \"start_ts\" : [{\r\n        \"type\" : \"array\",\r\n        \"start_ts\" :\"дата\",\r\n        \"дата\" : \"текущая дата\"\r\n    }]\r\n}\r\n    \r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&name&start_ts=дата=текущая дата",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "start_ts",
											"value": "дата=текущая дата"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(name, end_ts=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"end_ts\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().start_ts).to.eql(pm.environment.get(\"end_ts\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.end_ts).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains end_ts\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"end_ts\", \"null\");\r",
											"})\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"end_ts\" : \"null\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&name&end_ts=null",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "end_ts",
											"value": "null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST agents/{agent_id)/tasks(name, end_ts=дата=текущей)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"end_ts\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().end_ts).to.eql(pm.environment.get(\"end_ts\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.end_ts).to.be.an(\"array\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains start_ts\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"end_ts\", \"дата\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains start_ts\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"end_ts\", \"текущая дата\");\r",
											"});\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"\",\r\n    \"type\" : \"object\", \r\n    \"end_ts\" : [{\r\n        \"type\" : \"array\",\r\n        \"end_ts\" :\"дата\",\r\n        \"дата\" : \"текущая дата\"\r\n    }]\r\n}\r\n    ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks&name&end_ts=дата-текущая дата",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks"
										},
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "end_ts",
											"value": "дата-текущая дата"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET agents/{agent_id}/tasks/{uid}{status=Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"Success\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"status\" : \"Success\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/&uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&status=Success",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/"
										},
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "status",
											"value": "Success"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET agents/{agent_id}/tasks/{uid}{status=Error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"Error\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"status\" : \"Error\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents.?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/&uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&status=Error",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents."
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/"
										},
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "status",
											"value": "Error"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT agents/{agent_id}/tasks/{uid}(enabled=0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"enabled\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().enabled).to.eql(pm.environment.get(\"enabled\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.enabled).to.be.an(\"integer\");\r",
											" \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains enabled\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"enabled\", 0);\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"enabled\" : 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/&uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&enabled=0",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/"
										},
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "enabled",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT agents/{agent_id}/tasks/{uid}(enabled=1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"enabled\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().enabled).to.eql(pm.environment.get(\"enabled\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.enabled).to.be.an(\"integer\");\r",
											" \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains enabled\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"enabled\", 1);\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"enabled\" : 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/&uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&enabled=1",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/"
										},
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "enabled",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT agents/{agent_id}/tasks/{uid}(period=0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"period\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().period).to.eql(pm.environment.get(\"period\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.period).to.be.an(\"integer\");\r",
											" \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains period\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"period\", 0);\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"period\" : 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/&uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&period=0",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/"
										},
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "period",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT agents/{agent_id}/tasks/{uid}(period=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"period\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().period).to.eql(pm.environment.get(\"period\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.period).to.be.a(\"string\");\r",
											" \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains period\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"period\", null);\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"period\" : null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/&uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&period=null",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/"
										},
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "period",
											"value": "null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT agents/{agent_id}/tasks/{uid}(period=[1,...,1000])",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"period\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().period).to.eql(pm.environment.get(\"period\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.period).to.be.an(\"array\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains period\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"period\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"period\" : {\r\n        \"type\" : \"array\",\r\n        \"minItems\" : 1,\r\n        \"maxItems\" : 10000,\r\n        \"period\" : {\"type\" : \"integer\"}\r\n}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/&uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&period=[1,...,1000]",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/"
										},
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "period",
											"value": "[1,...,1000]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT agents/{agent_id}/tasks/{uid}(additional_params={\"vmwareScriptUrlZip\", \"address\", \"port\", \"user\", \"pwd\"})",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additional_params\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vmwareScriptUrlZip\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"port\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"user\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"pwd\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().additional_params).to.eql(pm.environment.get(\"additional_params\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vmwareScriprUrlZip).to.eql(pm.environment.get(\"vmwareScriptUrlZip\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().address).to.eql(pm.environment.get(\"address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().port).to.eql(pm.environment.get(\"port\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().user).to.eql(pm.environment.get(\"user\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().pwd).to.eql(pm.environment.get(\"pwd\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.additional_params).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.vmwareScriprUrlZip).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.port).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.user).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.pwd).to.be.a(\"string\");\r",
											" \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains vmwareScriprUrlZip\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vmwareScriprUrlZip\", \"https://code.vmware.com/doc/preview?id=13693\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"address\", \"192.168.234.4\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains port\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"port\", \"443\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains user\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"user\", \"root\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains pwd\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"pwd\", \"ForAcc2020\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa\",\r\n    \"additional_params\" : [{\r\n        \"vmwareScriptUrlZip\": \"https://code.vmware.com/doc/preview?id=13693\",\r\n        \"address\" : \"192.168.234.4\",\r\n        \"port\": \"443\",\r\n        \"user\": \"root\",\r\n        \"pwd\": \"ForAcc2020\"\r\n    }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/&uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&additional_params={\"vmwareScriptUrlZip\": \"https://code.vmware.com/doc/preview?id=13693\", \"address\" : \"192.168.234.4\", \"port\": \"443\", \"user\": \"root\", \"pwd\": \"ForAcc2020\" }",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/"
										},
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "additional_params",
											"value": "{\"vmwareScriptUrlZip\": \"https://code.vmware.com/doc/preview?id=13693\", \"address\" : \"192.168.234.4\", \"port\": \"443\", \"user\": \"root\", \"pwd\": \"ForAcc2020\" }"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT agents/{agent_id}/tasks/{uid}(additional_params={\"if_names\", \"addtional_tcp_ports\"})",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additional_params\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"if_names\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additional_tcp_ports\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().additional_params).to.eql(pm.environment.get(\"additional_params\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().if_names).to.eql(pm.environment.get(\"if_names\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().additional_tcp_ports).to.eql(pm.environment.get(\"additional_tcp_ports\"));\r",
											"});\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.additional_params).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.if_names).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.additional_tcp_ports).to.be.an(\"array\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains if_names\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"if_names\", [\"ethernet_32769\"]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains additional_tcp_ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"additional_tcp_ports\", [631, 9100, 5001, 9102, 9101, 9103, 9600]);\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"additional_params\" : [{\r\n        \"if_names\": [\"ethernet_32769\"],\r\n        \"additional_tcp_ports\": [631, 9100, 5001, 9102, 9101, 9103, 9600]\r\n    }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/&uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&additional_params={\"if_names\": [\"ethernet_32769\"], \"additional_tcp_ports\": [631, 9100, 5001, 9102, 9101, 9103, 9600]}",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/"
										},
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "additional_params",
											"value": "{\"if_names\": [\"ethernet_32769\"], \"additional_tcp_ports\": [631, 9100, 5001, 9102, 9101, 9103, 9600]}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT agents/{agent_id}/tasks/{uid}(run_as_user=пустой)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"run_as_user\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().run_as_user).to.eql(pm.environment.get(\"run_as_user\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.run_as_user).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains run_as_user\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"run_as_user\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"run_as_user\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/&uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&run_as_user",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/"
										},
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "run_as_user",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT agents/{agent_id}/tasks/{uid}(run_as_user=корректное значение пользователя)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"run_as_user\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().run_as_user).to.eql(pm.environment.get(\"run_as_user\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.run_as_user).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains run_as_user\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"run_as_user\", \"корректное значение пользователя\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"run_as_user\" : \"корректное значение пользователя\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/&uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&run_as_user=корректное значение пользователя",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/"
										},
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "run_as_user",
											"value": "корректное значение пользователя"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT agents/{agent_id}/tasks/{uid}(run_as_user=НЕкорректное значение пользователя)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"run_as_user\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().run_as_user).to.eql(pm.environment.get(\"run_as_user\"));\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.run_as_user).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains run_as_user\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"run_as_user\", \"НЕкорректное значение пользователя\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"run_as_user\" : \"НЕкорректное значение пользователя\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/&uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&run_as_user=НЕкорректное значение пользователя",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/"
										},
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "run_as_user",
											"value": "НЕкорректное значение пользователя"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT agents/{agent_id}/tasks/{uid}(enmabled=1, period=20, additional_params=пустой, run_as_user=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"enabled\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"period\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additional_params\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"run_as_user\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().enabled).to.eql(pm.environment.get(\"enabled\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().period).to.eql(pm.environment.get(\"period\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().additional_params).to.eql(pm.environment.get(\"additional_params\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().run_as_user).to.eql(pm.environment.get(\"run_as_user\"));\r",
											"});\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.enabled).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.period).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.additional_params).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.run_as_user).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains enabled\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"enabled\", 1);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains period\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"period\", 20);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains additional_params\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"additional_params\", \"\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains run_as_user\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"run_as_user\", \"null\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"enabled\" : 1,\r\n    \"period\" : 20,\r\n    \"additional_params\" : \"пустой\",\r\n    \"run_as_user\" : \"null\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/agents/?agent_id=3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/&uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&enabled&period&additional_params&run_as_user=null",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"agents",
										""
									],
									"query": [
										{
											"key": "agent_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tasks/"
										},
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "enabled",
											"value": ""
										},
										{
											"key": "period",
											"value": ""
										},
										{
											"key": "additional_params",
											"value": ""
										},
										{
											"key": "run_as_user",
											"value": "null"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "files",
					"item": [
						{
							"name": "GET files(uploaded_by_agent_id=пусто; file_name=кириллица; hash=корректное значение)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uploaded_by_agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"file_name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"hash\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uploaded_by_agent_id).to.eql(pm.environment.get(\"uploaded_by_agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().file_name).to.eql(pm.environment.get(\"file_name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().hash).to.eql(pm.environment.get(\"hash\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uploaded_by_agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.file_name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.hash).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains uploaded_by_agent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"uploaded_by_agent_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains file_name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"file_name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains hash\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"hash\", \"корректное значение\");\r",
											"})\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uploaded_by_agent_id\" : \"\",\r\n    \"file_name\" : \"кириллица\",\r\n    \"hash\" : \"корректное значение\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/files?uploaded_by_agent_id&file_name=кириллица&hash=корректное значение",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"files"
									],
									"query": [
										{
											"key": "uploaded_by_agent_id",
											"value": ""
										},
										{
											"key": "file_name",
											"value": "кириллица"
										},
										{
											"key": "hash",
											"value": "корректное значение"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET files(uploaded_by_agent_id=корректный id; file_name=пусто; hash=НЕкорректное значение)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uploaded_by_agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"file_name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"hash\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uploaded_by_agent_id).to.eql(pm.environment.get(\"uploaded_by_agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().file_name).to.eql(pm.environment.get(\"file_name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().hash).to.eql(pm.environment.get(\"hash\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uploaded_by_agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.file_name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.hash).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains uploaded_by_agent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"uploaded_by_agent_id\", \"корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains file_name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"file_name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains hash\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"hash\", \"НЕкорректное значение\");\r",
											"})\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uploaded_by_agent_id\" : \"корректный id\",\r\n    \"file_name\" : \"\",\r\n    \"hash\" : \"НЕкорректное значение\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/files?uploaded_by_agent_id=корректный id&file_name=&hash=НЕкорректное значение",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"files"
									],
									"query": [
										{
											"key": "uploaded_by_agent_id",
											"value": "корректный id"
										},
										{
											"key": "file_name",
											"value": ""
										},
										{
											"key": "hash",
											"value": "НЕкорректное значение"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET files(uploaded_by_agent_id=НЕкорректный id;file_name=латиница; hash=пусто)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uploaded_by_agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"file_name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"hash\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uploaded_by_agent_id).to.eql(pm.environment.get(\"uploaded_by_agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().file_name).to.eql(pm.environment.get(\"file_name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().hash).to.eql(pm.environment.get(\"hash\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uploaded_by_agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.file_name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.hash).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains uploaded_by_agent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"uploaded_by_agent_id\", \"НЕкорректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains file_name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"file_name\", \"латиница\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains hash\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"hash\", \"\");\r",
											"})\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uploaded_by_agent_id\" : \"НЕкорректный id\",\r\n    \"file_name\" : \"латиница\",\r\n    \"hash\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/files?uploaded_by_agent_id=НЕкорректный id&file_name=латиница&hash",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"files"
									],
									"query": [
										{
											"key": "uploaded_by_agent_id",
											"value": "НЕкорректный id"
										},
										{
											"key": "file_name",
											"value": "латиница"
										},
										{
											"key": "hash",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET files(uploaded_by_agent_id=корректный id; file_name=цифровое; hash=корректное значение)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uploaded_by_agent_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"file_name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"hash\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uploaded_by_agent_id).to.eql(pm.environment.get(\"uploaded_by_agent_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().file_name).to.eql(pm.environment.get(\"file_name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().hash).to.eql(pm.environment.get(\"hash\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uploaded_by_agent_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.file_name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.hash).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains uploaded_by_agent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"uploaded_by_agent_id\", \"корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains file_name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"file_name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains hash\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"hash\", \"корректное значение\");\r",
											"})\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uploaded_by_agent_id\" : \"корректный id\",\r\n    \"file_name\" : \"цифровое\",\r\n    \"hash\" : \"корректное значение\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/files?uploaded_by_agent_id=корректный id&file_name=цифровое&hash=корректное значение",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"files"
									],
									"query": [
										{
											"key": "uploaded_by_agent_id",
											"value": "корректный id"
										},
										{
											"key": "file_name",
											"value": "цифровое"
										},
										{
											"key": "hash",
											"value": "корректное значение"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST files/upload-from-user",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "GET files/{files_uid}/get-link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  \r",
											"})\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/files/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/get-link",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"files",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/get-link"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "products",
					"item": [
						{
							"name": "GET products/{uid}",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products?uid=",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products"
									],
									"query": [
										{
											"key": "uid",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE products/{uid}",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "GET products/{uid}/tags",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "DELETE products/{uid}/tags",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "GET products(vendor_id=пусто; type=software; name=пусто; tag_id =один корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains vendor_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vendor_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"software\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"один корректный id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"vendor_id\" : \"\",\r\n    \"type\" : \"software\",\r\n    \"name\" : \"\",\r\n    \"tag_id\" : \"один корректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products?vendor_id&type=software&name&tag_id=один корректный id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products"
									],
									"query": [
										{
											"key": "vendor_id",
											"value": ""
										},
										{
											"key": "type",
											"value": "software"
										},
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "tag_id",
											"value": "один корректный id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET products(vendor_id=корректный id; type=hardware; name=латиница; tag_id =один корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains vendor_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vendor_id\", \"корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"hardware\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"vendor_id\" : \"корректный id\",\r\n    \"type\" : \"hardware\",\r\n    \"name\" : \"латиница\",\r\n    \"tag_id\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products?vendor_id=корректный id&type=hardware&name=латиница&tag_id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products"
									],
									"query": [
										{
											"key": "vendor_id",
											"value": "корректный id"
										},
										{
											"key": "type",
											"value": "hardware"
										},
										{
											"key": "name",
											"value": "латиница"
										},
										{
											"key": "tag_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET products(vendor_id=НЕкорректный id; type=пустой; name=кирилица; tag_id =один НЕкорректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains vendor_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vendor_id\", \"НЕкорректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"один НЕкорректный id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"vendor_id\" : \"НЕкорректный id\",\r\n    \"type\" : \"\",\r\n    \"name\" : \"кириллица\",\r\n    \"tag_id\" : \"один НЕкорректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products?vendor_id=НЕкорректный id&type=&name=кириллица&tag_id=один НЕкорректный id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products"
									],
									"query": [
										{
											"key": "vendor_id",
											"value": "НЕкорректный id"
										},
										{
											"key": "type",
											"value": ""
										},
										{
											"key": "name",
											"value": "кириллица"
										},
										{
											"key": "tag_id",
											"value": "один НЕкорректный id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET products(vendor_id=НЕкорректный id; type=пустой; name=кирилица; tag_id =один НЕкорректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains vendor_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vendor_id\", \"корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"hardware\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"три корректных id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"vendor_id\" : \"корректный id\",\r\n    \"type\" : \"hardware\",\r\n    \"name\" : \"латиница\",\r\n    \"tag_id\" : \"три корректных id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products?vendor_id=корректный id&type=hardware&name=латиница&tag_id=три корректных id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products"
									],
									"query": [
										{
											"key": "vendor_id",
											"value": "корректный id"
										},
										{
											"key": "type",
											"value": "hardware"
										},
										{
											"key": "name",
											"value": "латиница"
										},
										{
											"key": "tag_id",
											"value": "три корректных id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST products(vendor_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains vendor_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vendor_id\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"vendor_id\": \"\",\r\n  \"type\": \"\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products?vendor_id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products"
									],
									"query": [
										{
											"key": "vendor_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST products(name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"vendor_id\": \"\",\r\n  \"type\": \"\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products?name",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products"
									],
									"query": [
										{
											"key": "name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST products(type)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"vendor_id\": \"\",\r\n  \"type\": \"\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products?type",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products"
									],
									"query": [
										{
											"key": "type",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST products(name и vendor_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains vendor_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vendor_id\", \"\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"vendor_id\": \"\",\r\n  \"type\": \"\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products?name&vendor_id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products"
									],
									"query": [
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "vendor_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST products(name=латиница, type=software, vendor_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"software\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains vendor_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vendor_id\", \"корректный id\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"vendor_id\": \"корректный id\",\r\n  \"type\": \"software\",\r\n  \"name\": \"латиница\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products?name=латиница&type=software&vendor_id=корректный id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products"
									],
									"query": [
										{
											"key": "name",
											"value": "латиница"
										},
										{
											"key": "type",
											"value": "software"
										},
										{
											"key": "vendor_id",
											"value": "корректный id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST products(name=кирилица, type=hardware, vendor_id=НЕкорректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"hardware\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains vendor_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vendor_id\", \"НЕкорректный id\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"vendor_id\": \"НЕкорректный id\",\r\n  \"type\": \"hardware\",\r\n  \"name\": \"кириллица\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products?name=кириллица&type=hardware&vendor_id=НЕкорректный id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products"
									],
									"query": [
										{
											"key": "name",
											"value": "кириллица"
										},
										{
											"key": "type",
											"value": "hardware"
										},
										{
											"key": "vendor_id",
											"value": "НЕкорректный id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST products(name=цифровое, type=software, vendor_id=корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"software\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains vendor_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vendor_id\", \"корректный id\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"vendor_id\": \"корректный id\",\r\n  \"type\": \"software\",\r\n  \"name\": \"цифровое\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products?name=цифровое&type=software&vendor_id=корректный id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products"
									],
									"query": [
										{
											"key": "name",
											"value": "цифровое"
										},
										{
											"key": "type",
											"value": "software"
										},
										{
											"key": "vendor_id",
											"value": "корректный id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT products/{uid}(vendor_id=НЕкорректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains vendor_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vendor_id\", \"НЕкорректный id\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"vendor_id\": \"НЕкорректный id\",\r\n  \"type\": \"\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&vendor_id=НЕкорректный id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "vendor_id",
											"value": "НЕкорректный id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT products/{uid}(vendor_id=null(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains vendor_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vendor_id\", \"null(ошибка)\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"vendor_id\": \"null(ошибка)\",\r\n  \"type\": \"\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&vendor_id=null(ошибка)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "vendor_id",
											"value": "null(ошибка)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT products/{uid}(type=hardware)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"hardware\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"vendor_id\": \"\",\r\n  \"type\": \"hardware\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&type=hardware",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "type",
											"value": "hardware"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT products/{uid}(type=software)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"software\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"vendor_id\": \"\",\r\n  \"type\": \"software\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&type=software",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "type",
											"value": "software"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT products/{uid}(type=null(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"type\", \"null(ошибка)\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"vendor_id\": \"\",\r\n  \"type\": \"null(ошибка)\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&type=null(ошибка)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "type",
											"value": "null(ошибка)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT products/{uid}(name=латиница)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"vendor_id\": \"\",\r\n  \"type\": \"\",\r\n  \"name\": \"латиница\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&name=латиница",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "name",
											"value": "латиница"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT products/{uid}(name=цифровое)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"vendor_id\": \"\",\r\n  \"type\": \"\",\r\n  \"name\": \"цифровое\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&name=цифровое",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "name",
											"value": "цифровое"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT products/{uid}(name=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vendor_id\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vendor_id).to.eql(pm.environment.get(\"vendor_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().type).to.eql(pm.environment.get(\"type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.vendor_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"null\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"vendor_id\": \"\",\r\n  \"type\": \"\",\r\n  \"name\": \"null\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&name=null",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "name",
											"value": "null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT products/{uid}/tags(добавить тэг к продукту, ранее не имевшему тэг)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"один корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"один корректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT products/{uid}/tags(добавить тэг к продукту, ранее имевшему тэг)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"один корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"один корректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT products/{uid}/tags(добавить три тэга к продукту, ранее не имевшему тэг)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"три корректных id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"три корректных id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT products/{uid}/tags(добавить три тэга к продукту, ранее  имевшему тэг)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"три корректных id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"три корректных id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT products/{uid}/tags(оставить два тэга от продукта, ранее имевшему четыре тэга)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"два корректных id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"два корректных id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT products/{uid}/tags(оставить пустой массив)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST products/{uid}/tags(прикрепить тэг к продукту, ранее не имевшего тэга)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"один корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"один корректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST products/{uid}/tags(прикрепить тэг к продукту, ранее имевшему тэг)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"один корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"один корректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST products/{uid}/tags(прикрепить два тэга к продукту, ранее не имевшего тэга)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"два корректных id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"два корректных id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST products/{uid}/tags(прикрепить два тэга к продукту, ранее имевшему тэг)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"два корректных id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"два корректных id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/products/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "network-nodes",
					"item": [
						{
							"name": "GET network-nodes(mac_address= пустой; ip_address=192.168.238.33/24; has_snmp =пустой)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"192.168.238.33/24\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mac_address\" : \"\",\r\n    \"ip_address\" : \"192.168.238.33/24\",\r\n    \"has_snmp\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes?mac_address=&ip_address=192.168.238.33/24&has_snmp=",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes"
									],
									"query": [
										{
											"key": "mac_address",
											"value": ""
										},
										{
											"key": "ip_address",
											"value": "192.168.238.33/24"
										},
										{
											"key": "has_snmp",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET network-nodes(mac_address= пустой; ip_address=192.168.238.33; has_snmp =пустой)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"192.168.238.33\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mac_address\" : \"\",\r\n    \"ip_address\" : \"192.168.238.33\",\r\n    \"has_snmp\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes?mac_address=&ip_address=192.168.238.33&has_snmp=",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes"
									],
									"query": [
										{
											"key": "mac_address",
											"value": ""
										},
										{
											"key": "ip_address",
											"value": "192.168.238.33"
										},
										{
											"key": "has_snmp",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET network-nodes(mac_address=0c:c4:7a:05:09:0; ip_address=пустой; has_snmp = true)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"0c:c4:7a:05:09:0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mac_address\" : \"0c:c4:7a:05:09:0\",\r\n    \"ip_address\" : \"\",\r\n    \"has_snmp\" : true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes?mac_address=0c:c4:7a:05:09:0&ip_address=&has_snmp=true",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes"
									],
									"query": [
										{
											"key": "mac_address",
											"value": "0c:c4:7a:05:09:0"
										},
										{
											"key": "ip_address",
											"value": ""
										},
										{
											"key": "has_snmp",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET network-nodes(mac_address= пустой; ip_address=192.168.238.33/24; has_snmp =false)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"192.168.238.33/24\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", false);\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mac_address\" : \"\",\r\n    \"ip_address\" : \"192.168.238.33/24\",\r\n    \"has_snmp\" : false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes?mac_address=&ip_address=192.168.238.33/24&has_snmp=false",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes"
									],
									"query": [
										{
											"key": "mac_address",
											"value": ""
										},
										{
											"key": "ip_address",
											"value": "192.168.238.33/24"
										},
										{
											"key": "has_snmp",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET network-nodes(mac_address= пустой; ip_address=192.168.238.33/24; has_snmp =false)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"192.168.238.33\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", false);\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mac_addres\" : \"\",\r\n    \"ip_address\" : \"192.168.238.33\",\r\n    \"has_snmp\" : false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes?mac_address=&ip_address=192.168.238.33&has_snmp=false",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes"
									],
									"query": [
										{
											"key": "mac_address",
											"value": ""
										},
										{
											"key": "ip_address",
											"value": "192.168.238.33"
										},
										{
											"key": "has_snmp",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(ci_id=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"null\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"});\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"null\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 0,\r\n      \"protocol\": \"\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ci_id=null",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ci_id",
											"value": "null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(ci_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"});\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 0,\r\n      \"protocol\": \"\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ci_id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ci_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(изменить только параметр ports / number (не должно меняться без параметра protocol))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 1);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"});\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 1,\r\n      \"protocol\": \"\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ports/number=1",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ports/number",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(изменить только параметр ports / protocol (не должно меняться без параметра number))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"протокол\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"});\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 0,\r\n      \"protocol\": \"протокол\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ports/protocol=протокол",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ports/protocol",
											"value": "протокол"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(изменить только параметр ports / answer (не должно меняться без параметра number))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"ответ\");\r",
											"});\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 0,\r\n      \"protocol\": \"\",\r\n      \"answer\": \"ответ\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ports/answer=ответ",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ports/answer",
											"value": "ответ"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(изменить только параметр mac_address со значения на null (ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"null\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"null\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 0,\r\n      \"protocol\": \"\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6\n&mac_address=null",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6\n"
										},
										{
											"key": "mac_address",
											"value": "null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(изменить только параметр mac_address cо значения на значение)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 0,\r\n      \"protocol\": \"\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6\n&mac_address=",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6\n"
										},
										{
											"key": "mac_address",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(изменить только параметр ip_address со значения на null (ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 0,\r\n      \"protocol\": \"\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6\n&mac_address=",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6\n"
										},
										{
											"key": "mac_address",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(изменить только параметр ip_address cо значения на null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"null\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"null\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 0,\r\n      \"protocol\": \"\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6\n&ip_address=null",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6\n"
										},
										{
											"key": "ip_address",
											"value": "null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(изменить только параметр ip_address cо значения на значение)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 0,\r\n      \"protocol\": \"\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6\n&ip_address=",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6\n"
										},
										{
											"key": "ip_address",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(изменить только параметр has_snmp c true на false)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", false);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": false,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 0,\r\n      \"protocol\": \"\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&has_snmp=false",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "has_snmp",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(изменить только параметр has_snmp c false на true)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 0,\r\n      \"protocol\": \"\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&has_snmp=false",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "has_snmp",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(изменить только параметр has_snmp на null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", null);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": null,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 0,\r\n      \"protocol\": \"\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&has_snmp=null",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "has_snmp",
											"value": "null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(number = null, protocol = null (некорректные значения))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", null);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"null\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": null,\r\n      \"protocol\": \"null\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ports/number=null&ports/protocol=null",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ports/number",
											"value": "null"
										},
										{
											"key": "ports/protocol",
											"value": "null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(number = 0, protocol = протокол(латиница))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"протокол(латиница)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 0,\r\n      \"protocol\": \"протокол(латиница)\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ports/number=0&ports/protocol=протокол(латиница)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ports/number",
											"value": "0"
										},
										{
											"key": "ports/protocol",
											"value": "протокол(латиница)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(number = 20, protocol = protocol(кириллица))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 20);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"protocol(кириллица)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 20,\r\n      \"protocol\": \"protocol(кириллица)\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ports/number=20&ports/protocol=protocol(кириллица)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ports/number",
											"value": "20"
										},
										{
											"key": "ports/protocol",
											"value": "protocol(кириллица)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(number = 1000, protocol =1245 (цифровое))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"1245(цифровое)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 1000,\r\n      \"protocol\": \"1245(цифровое)\",\r\n      \"answer\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ports/number=1000&ports/protocol=1245(цифровое)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ports/number",
											"value": "1000"
										},
										{
											"key": "ports/protocol",
											"value": "1245(цифровое)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(number = 0, protocol = протокол(кириллица), answer=null(некорректное значение))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"протокол(кириллица)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"null(некорректное значение\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 0,\r\n      \"protocol\": \"протокол(кириллица)\",\r\n      \"answer\": \"null(некорректное значение)\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ports/number=0&ports/protocol=протокол(кириллица)&ports/answer=null(некорректное значение)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ports/number",
											"value": "0"
										},
										{
											"key": "ports/protocol",
											"value": "протокол(кириллица)"
										},
										{
											"key": "ports/answer",
											"value": "null(некорректное значение)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(number = 20, protocol = протокол(кириллица), answer=ответ(кириллица))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 20);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"protocol(латиница)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"ответ(кириллица)\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 20,\r\n      \"protocol\": \"protocol(латиница)\",\r\n      \"answer\": \"ответ(кириллица)\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ports/number=20&ports/protocol=protocol(латиница)&ports/answer=ответ(кириллица)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ports/number",
											"value": "20"
										},
										{
											"key": "ports/protocol",
											"value": "protocol(латиница)"
										},
										{
											"key": "ports/answer",
											"value": "ответ(кириллица)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(number = 1000, protocol = 1245(цифровое), answer=otwet(латиница))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"1245(цифровое)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"otwet(латиница)\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 1000,\r\n      \"protocol\": \"1245(цифровое)\",\r\n      \"answer\": \"otwet(латиница)\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ports/number=1000&ports/protocol=1245(цифровое)&ports/answer=ответ(кириллица)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ports/number",
											"value": "1000"
										},
										{
											"key": "ports/protocol",
											"value": "1245(цифровое)"
										},
										{
											"key": "ports/answer",
											"value": "ответ(кириллица)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-nodes/{uid}(number = 1000, protocol = 1245(цифровое), answer=12345(цифровое))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"segment_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"mac_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has_snmp\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ports\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches integer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"protocol\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"answer\");\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().segment_id).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_id).to.eql(pm.environment.get(\"ci_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().mac_address).to.eql(pm.environment.get(\"mac_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().has_snmp).to.eql(pm.environment.get(\"has_snmp\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ports).to.eql(pm.environment.get(\"ports\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().number).to.eql(pm.environment.get(\"number\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().protocol).to.eql(pm.environment.get(\"protocol\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().answer).to.eql(pm.environment.get(\"answer\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.segment_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.has_snmp).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.ports).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.number).to.be.an(\"integer\");\r",
											"  pm.expect(jsonData.protocol).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.answer).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_id\", \"3fa85f64-5717-4562-b3fc-2c963f66afa6\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains has_snmp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"has_snmp\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ports\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ports\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"number\", 1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains protocol\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"protocol\", \"1245(цифровое)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains answer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"answer\", \"12345(цифровое)\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"segment_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"ci_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"mac_address\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"has_snmp\": true,\r\n  \"ports\": [\r\n    {\r\n      \"number\": 1000,\r\n      \"protocol\": \"1245(цифровое)\",\r\n      \"answer\": \"12345(цифровое)\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ports/number=1000&ports/protocol=1245(цифровое)&ports/answer=12345(цифровое)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ports/number",
											"value": "1000"
										},
										{
											"key": "ports/protocol",
											"value": "1245(цифровое)"
										},
										{
											"key": "ports/answer",
											"value": "12345(цифровое)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-document-device(type=unknown)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"device_type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().device_type).to.eql(pm.environment.get(\"device_type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.device_type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains device_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"device_type\", \"unknown\");\r",
											"})\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"device_type\" : \"unknown\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?&device_type=unknown&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?"
										},
										{
											"key": "device_type",
											"value": "unknown"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-document-device(type=printer)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"device_type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().device_type).to.eql(pm.environment.get(\"device_type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.device_type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains device_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"device_type\", \"printer\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"device_type\" : \"printer\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?&device_type=printer&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?"
										},
										{
											"key": "device_type",
											"value": "printer"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-document-device(type=scanner)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"device_type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().device_type).to.eql(pm.environment.get(\"device_type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.device_type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains device_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"device_type\", \"scanner\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"device_type\" : \"scanner\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?&device_type=scanner&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?"
										},
										{
											"key": "device_type",
											"value": "scanner"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-document-device(type=fax)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"device_type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().device_type).to.eql(pm.environment.get(\"device_type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.device_type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains device_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"device_type\", \"fax\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"device_type\" : \"fax\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?&device_type=fax&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?"
										},
										{
											"key": "device_type",
											"value": "fax"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-document-device(type=multi_function)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"device_type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().device_type).to.eql(pm.environment.get(\"device_type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.device_type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains device_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"device_type\", \"multi_function\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"device_type\" : \"multi_function\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?&device_type=multi_function&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?"
										},
										{
											"key": "device_type",
											"value": "multi_function"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-document-device(name=кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"кириллица\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?&name=кириллица&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?"
										},
										{
											"key": "name",
											"value": "кириллица"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-document-device(name=латиница)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"латиница\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?&name=латиница&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?"
										},
										{
											"key": "name",
											"value": "латиница"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-document-device(name=латиница)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"цифровое\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?&name=цифровое&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create document_device?"
										},
										{
											"key": "name",
											"value": "цифровое"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-network-device(type=unknown)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"device_type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().device_type).to.eql(pm.environment.get(\"device_type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.device_type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains device_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"device_type\", \"unknown\");\r",
											"})\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"device_type\" : \"unknown\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?&device_type=unknown&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?"
										},
										{
											"key": "device_type",
											"value": "unknown"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-network-device(type=router)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"device_type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().device_type).to.eql(pm.environment.get(\"device_type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.device_type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains device_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"device_type\", \"router\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"device_type\" : \"router\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?&device_type=router&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?"
										},
										{
											"key": "device_type",
											"value": "router"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-network-device(type=access_point)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"device_type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().device_type).to.eql(pm.environment.get(\"device_type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.device_type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains device_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"device_type\", \"access_point\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"device_type\" : \"access_point\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?&device_type=access_point&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?"
										},
										{
											"key": "device_type",
											"value": "access_point"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-network-device(type=switch)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"device_type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().device_type).to.eql(pm.environment.get(\"device_type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.device_type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains device_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"device_type\", \"switch\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"device_type\" : \"switch\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?&device_type=switch&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?"
										},
										{
											"key": "device_type",
											"value": "switch"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-network-device(type=complex_device)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"device_type\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().device_type).to.eql(pm.environment.get(\"device_type\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.device_type).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains device_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"device_type\", \"complex_device\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"device_type\" : \"complex_device\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?&device_type=complex_device&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?"
										},
										{
											"key": "device_type",
											"value": "complex_device"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-network-device(name=кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"кириллица\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?&name=кириллица&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?"
										},
										{
											"key": "name",
											"value": "кириллица"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-network-device(name=латиница)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"латиница\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?&name=латиница&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?"
										},
										{
											"key": "name",
											"value": "латиница"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-nodes{uid}/create-network-device(name=цифровое)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"name\" : \"цифровое\",\r\n    \"product_id\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/nodes/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?&name=цифровое&product_id=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"nodes",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/create network_device?"
										},
										{
											"key": "name",
											"value": "цифровое"
										},
										{
											"key": "product_id",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "network-segments",
					"item": [
						{
							"name": "GET network-segments(name = пустой;status = draft;ip_address = корректный имеющийся;gw_mac_address = корректный имеющийся;gw_ip_address = корректный имеющийся)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"корректный имеющийся\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"корректный имеющийся\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"корректный имеющийся\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"\",\r\n    \"status\" : \"draft\",\r\n    \"ip_address\" : \"корректный имеющийся\",\r\n    \"gw_mac_address\" : \"корректный имеющийся\",\r\n    \"gw_ip_address\" : \"корректный имеющийся\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?name=&status=draft&ip_address=корректный имеющийся&gw_mac_address=корректный имеющийся&gw_ip_address=корректный имеющийся",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "status",
											"value": "draft"
										},
										{
											"key": "ip_address",
											"value": "корректный имеющийся"
										},
										{
											"key": "gw_mac_address",
											"value": "корректный имеющийся"
										},
										{
											"key": "gw_ip_address",
											"value": "корректный имеющийся"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET network-segments(name = кириллица ;status =пустой ;ip_address = корректный неимеющийся;gw_mac_address = корректный неимеющийся;gw_ip_address = корректный неимеющийся)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"корректный неимеющийся\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"корректный неимеющийся\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"корректный неимеющийся\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"кириллица\",\r\n    \"status\" : \"\",\r\n    \"ip_address\" : \"корректный неимеющийся\",\r\n    \"gw_mac_address\" : \"корректный неимеющийся\",\r\n    \"gw_ip_address\" : \"корректный неимеющийся\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?name=кириллица&status=&ip_address=корректный неимеющийся&gw_mac_address=корректный неимеющийся&gw_ip_address=корректный неимеющийся",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "name",
											"value": "кириллица"
										},
										{
											"key": "status",
											"value": ""
										},
										{
											"key": "ip_address",
											"value": "корректный неимеющийся"
										},
										{
											"key": "gw_mac_address",
											"value": "корректный неимеющийся"
										},
										{
											"key": "gw_ip_address",
											"value": "корректный неимеющийся"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET network-segments(name = латиница;status = active;ip_address = пустой ;gw_mac_address = некорректный ;gw_ip_address = некорректный)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"active\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"некорректный\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"некорректный\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"латиница\",\r\n    \"status\" : \"active\",\r\n    \"ip_address\" : \"\",\r\n    \"gw_mac_address\" : \"некорректный\",\r\n    \"gw_ip_address\" : \"некорректный\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?name=латиница&status=active&ip_address=&gw_mac_address=некорректный &gw_ip_address=некорректный ",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "name",
											"value": "латиница"
										},
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "ip_address",
											"value": ""
										},
										{
											"key": "gw_mac_address",
											"value": "некорректный "
										},
										{
											"key": "gw_ip_address",
											"value": "некорректный "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET network-segments(name = цифровой;status = archived;ip_address = некорректный;gw_mac_address = пустой;gw_ip_address = корректный имеющийся)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"archived\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"некорректный\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"корректный имеющийся\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"цифровое\",\r\n    \"status\" : \"archived\",\r\n    \"ip_address\" : \"некорректный\",\r\n    \"gw_mac_address\" : \"\",\r\n    \"gw_ip_address\" : \"корректный имеющийся\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?name=цифровое&status=archived&ip_address=некорректный&gw_mac_address=&gw_ip_address=корректный имеющийся",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "name",
											"value": "цифровое"
										},
										{
											"key": "status",
											"value": "archived"
										},
										{
											"key": "ip_address",
											"value": "некорректный"
										},
										{
											"key": "gw_mac_address",
											"value": ""
										},
										{
											"key": "gw_ip_address",
											"value": "корректный имеющийся"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET network-segments(name = кириллица;status = draft;ip_address = корректный имеющийся;gw_mac_address = корректный имеющийся ;gw_ip_address =  пустой)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"корректный имеющийся\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"корректный имеющийся\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"кириллица\",\r\n    \"status\" : \"draft\",\r\n    \"ip_address\" : \"корректный имеющийся\",\r\n    \"gw_mac_address\" : \"корректный имеющийся\",\r\n    \"gw_ip_address\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?name=кириллица&status=draft&ip_address=корректный имеющийся&gw_mac_address=корректный имеющийся&gw_ip_address=",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "name",
											"value": "кириллица"
										},
										{
											"key": "status",
											"value": "draft"
										},
										{
											"key": "ip_address",
											"value": "корректный имеющийся"
										},
										{
											"key": "gw_mac_address",
											"value": "корректный имеющийся"
										},
										{
											"key": "gw_ip_address",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET network-segments(name = латиница;status = active;ip_address = корректный имеющийся;gw_mac_address = ;корректный имеющийсяgw_ip_address = корректный имеющийся)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"active\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"корректный имеющийся\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"корректный имеющийся\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"корректный имеющийся\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"латиница\",\r\n    \"status\" : \"active\",\r\n    \"ip_address\" : \"корректный имеющийся\",\r\n    \"gw_mac_address\" : \"корректный имеющийся\",\r\n    \"gw_ip_address\" : \"корректный имеющийся\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?name=латиница&status=active&ip_address=корректный имеющийся&gw_mac_address=корректный имеющийся&gw_ip_address=корректный имеющийся",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "name",
											"value": "латиница"
										},
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "ip_address",
											"value": "корректный имеющийся"
										},
										{
											"key": "gw_mac_address",
											"value": "корректный имеющийся"
										},
										{
											"key": "gw_ip_address",
											"value": "корректный имеющийся"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-segments(name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?name",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-segments(ip_address)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?ip_address",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "ip_address",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-segments(gw_mac_address)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?gw_mac_address",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "gw_mac_address",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-segments(gw_ip_address)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?gw_ip_address",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "gw_ip_address",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-segments(status)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?status",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "status",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-segments( name=null; ip_address=корректное значение; gw_mac_address=НЕкорректное значение; gw_ip_address=корректное значение; status=draft)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"null\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"корректное значение\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"НЕкорректное значение\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"корректное значение\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"null\",\r\n  \"ip_address\": \"корректное значение\",\r\n  \"gw_mac_address\": \"НЕкорректное значение\",\r\n  \"gw_ip_address\": \"корректное значение\",\r\n  \"status\": \"draft\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?name=null&ip_address=корректное значение&gw_mac_address=НЕкорректное значчение&gw_ip_address=корректное значение&status=draft",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "name",
											"value": "null"
										},
										{
											"key": "ip_address",
											"value": "корректное значение"
										},
										{
											"key": "gw_mac_address",
											"value": "НЕкорректное значчение"
										},
										{
											"key": "gw_ip_address",
											"value": "корректное значение"
										},
										{
											"key": "status",
											"value": "draft"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-segments(name=кириллица; ip_address=НЕкорректное значение; gw_mac_address=корректное значение; gw_ip_address=НЕкорректное значение; status=active)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"active\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"НЕкорректное значение\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"корректное значение\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"НЕкорректное значение\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"кириллица\",\r\n  \"ip_address\": \"НЕкорректное значение\",\r\n  \"gw_mac_address\": \"корректное значение\",\r\n  \"gw_ip_address\": \"НЕкорректное значение\",\r\n  \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?name=кириллица&ip_address=НЕкорректное значение&gw_mac_address=корректное значчение&gw_ip_address=НЕкорректное значение&status=active",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "name",
											"value": "кириллица"
										},
										{
											"key": "ip_address",
											"value": "НЕкорректное значение"
										},
										{
											"key": "gw_mac_address",
											"value": "корректное значчение"
										},
										{
											"key": "gw_ip_address",
											"value": "НЕкорректное значение"
										},
										{
											"key": "status",
											"value": "active"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-segments(name=латиница; ip_address=null; gw_mac_address=корректное значение; gw_ip_address=корректное значение; status=archived)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"archived\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"НЕкорректное значение\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"корректное значение\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"НЕкорректное значение\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"латиница\",\r\n  \"ip_address\": \"НЕкорректное значение\",\r\n  \"gw_mac_address\": \"корректное значение\",\r\n  \"gw_ip_address\": \"НЕкорректное значение\",\r\n  \"status\": \"archived\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?name=латиница&ip_address=НЕкорректное значение&gw_mac_address=корректное значчение&gw_ip_address=НЕкорректное значение&status=archived",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "name",
											"value": "латиница"
										},
										{
											"key": "ip_address",
											"value": "НЕкорректное значение"
										},
										{
											"key": "gw_mac_address",
											"value": "корректное значчение"
										},
										{
											"key": "gw_ip_address",
											"value": "НЕкорректное значение"
										},
										{
											"key": "status",
											"value": "archived"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-segments(name=цифровое; ip_address=корректное значение; gw_mac_address=null; gw_ip_address=корректное значение; status=draft)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"корректное значение\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"null\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"корректное значение\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"цифровое\",\r\n  \"ip_address\": \"корректное значение\",\r\n  \"gw_mac_address\": \"null\",\r\n  \"gw_ip_address\": \"корректное значение\",\r\n  \"status\": \"draft\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?name=цифровое&ip_address=корректное значение&gw_mac_address=null&gw_ip_address=корректное значение&status=draft",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "name",
											"value": "цифровое"
										},
										{
											"key": "ip_address",
											"value": "корректное значение"
										},
										{
											"key": "gw_mac_address",
											"value": "null"
										},
										{
											"key": "gw_ip_address",
											"value": "корректное значение"
										},
										{
											"key": "status",
											"value": "draft"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST network-segments(name=цифровое; ip_address=корректное значение; gw_mac_address=корректное значение; gw_ip_address=null; status=draft)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"корректное значение\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"корректное значение\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"null\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"цифровое\",\r\n  \"ip_address\": \"корректное значение\",\r\n  \"gw_mac_address\": \"корректное значение\",\r\n  \"gw_ip_address\": \"null\",\r\n  \"status\": \"draft\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments?name=цифровое&ip_address=корректное значение&gw_mac_address=корректное значение&gw_ip_address=null&status=draft",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments"
									],
									"query": [
										{
											"key": "name",
											"value": "цифровое"
										},
										{
											"key": "ip_address",
											"value": "корректное значение"
										},
										{
											"key": "gw_mac_address",
											"value": "корректное значение"
										},
										{
											"key": "gw_ip_address",
											"value": "null"
										},
										{
											"key": "status",
											"value": "draft"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(name=латиница)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"латиница\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"латиница\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"draft\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&name=латиница",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "name",
											"value": "латиница"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(name=кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"кириллица\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"кириллица\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"draft\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&name=кириллица",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "name",
											"value": "кириллица"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(name=цифровое)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"цифровое\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"цифровое\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"draft\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&name=цифровое",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "name",
											"value": "цифровое"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(name=null(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"null(ошибка)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"null(ошибка)\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"draft\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&name=null(ошибка)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "name",
											"value": "null(ошибка)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(status=active)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"active\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&status=active",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "status",
											"value": "active"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(status=archived)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"archived\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"archived\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&status=archived",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "status",
											"value": "archived"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(status=draft)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"draft\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&status=draft",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "status",
											"value": "draft"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(status=null(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"null(ошибка)\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"null(ошибка)\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&status=null(ошибка)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "status",
											"value": "null(ошибка)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(ip_address=некорректный формат(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"некорректный формат(ошибка)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"\",\r\n  \"ip_address\": \"некорректный формат(ошибка)\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"draft\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ip_address=некорректный формат(ошибка)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ip_address",
											"value": "некорректный формат(ошибка)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(ip_address=корректный формат)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"корректный формат\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"\",\r\n  \"ip_address\": \"корректный формат\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"draft\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ip_address=корректный формат",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ip_address",
											"value": "корректный формат"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(ip_address=null(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"null(ошибка)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"\",\r\n  \"ip_address\": \"null(ошибка)\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"draft\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ip_address=null(ошибка)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ip_address",
											"value": "null(ошибка)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(gw_ip_address=null(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"null(ошибка)\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"null(ошибка)\",\r\n  \"status\": \"draft\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&gw_ip_address=null(ошибка)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "gw_ip_address",
											"value": "null(ошибка)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(gw_ip_address=корректный формат)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"корректный формат\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"корректный формат\",\r\n  \"status\": \"draft\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&gw_ip_address=корректный формат",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "gw_ip_address",
											"value": "корректный формат"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(gw_ip_address=некорректный формат)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"некорректный формат\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"\",\r\n  \"gw_ip_address\": \"некорректный формат\",\r\n  \"status\": \"draft\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&gw_ip_address=некорректный формат",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "gw_ip_address",
											"value": "некорректный формат"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(gw_mac_address=корректный формат)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"корректный формат\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"корректный формат\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"draft\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&gw_mac_address=корректный формат",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "gw_mac_address",
											"value": "корректный формат"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(gw_mac_address=некорректный формат)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"некорректный формат\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"некорректный формат\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"draft\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&gw_mac_address=некорректный формат",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "gw_mac_address",
											"value": "некорректный формат"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT network-segments/{uid}(gw_mac_address=null(ошибка))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ip_address\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_mac_address\");\r",
											"    });\r",
											"\r",
											"\r",
											"   pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"gw_ip_address\");\r",
											"    }); \r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"  pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ip_address).to.eql(pm.environment.get(\"ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_mac_address).to.eql(pm.environment.get(\"gw_mac_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().gw_ip_address).to.eql(pm.environment.get(\"gw_ip_address\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ip_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_mac_address).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.gw_ip_address).to.be.a(\"string\");\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"status\", \"draft\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Response contains ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ip_address\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_mac_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_mac_address\", \"null(ошибка)\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains gw_ip_address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"gw_ip_address\", \"\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  \"name\": \"\",\r\n  \"ip_address\": \"\",\r\n  \"gw_mac_address\": \"null(ошибка)\",\r\n  \"gw_ip_address\": \"\",\r\n  \"status\": \"draft\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/network/segments/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&gw_mac_address=null(ошибка)",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"network",
										"segments",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "gw_mac_address",
											"value": "null(ошибка)"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ci",
					"item": [
						{
							"name": "GET cis(ci_class= service; parent_id=один корректный id; detected_at_id=НЕкорректный id; agent_id=корректный id; vsm_host_machine=true; endpoint_type=default; tag_id=один корректный id; product_id=один корректный id; location_id=один корректный id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detected_at_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vsm_host_machine\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"endpoint_type\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().detected_at_id).to.eql(pm.environment.get(\"detected_at_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vsm_host_machine_id).to.eql(pm.environment.get(\"vsm_host_machine\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().endpoint_type).to.eql(pm.environment.get(\"endpoint_type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().product_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.detected_at_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.vsm_host_machine).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.endpoint_type).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"service\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"один корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains detected_at_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"detected_at_id\", \"НЕкорректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains agent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"agent_id\", \"корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains vsm_host_machine\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vsm_host_machine\", true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains endpoint_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"endpoint_type\", \"default\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"один корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains product_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"product_id\", \"один корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"один корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"один корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ci_class\" : \"service\",\r\n    \"parent_id\" : \"один корректный id\",\r\n    \"detected_at_id\" : \"НЕкорректный id\",\r\n    \"agent_id\" : \"корректный id\",\r\n    \"vsm_host_machine\" : true,\r\n    \"endpoint_type\" : \"default\",\r\n    \"tag_id\" : \"один корректный id\",\r\n    \"product_id\" : \"один корректный id\",\r\n    \"location_id\" : \"один корректный id\",\r\n    \"ou_id\" : \"один корректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis?ci_class=service&parent_id=один корректный id&detected_at_id=НЕкорректный id&agent_id=корректный id&vsm_host_machine=true&endpoint_type=default&tag_id=один корректный id&product_id=один корректный id&location_id=один корректный id&ou_id=один корректный id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis"
									],
									"query": [
										{
											"key": "ci_class",
											"value": "service"
										},
										{
											"key": "parent_id",
											"value": "один корректный id"
										},
										{
											"key": "detected_at_id",
											"value": "НЕкорректный id"
										},
										{
											"key": "agent_id",
											"value": "корректный id"
										},
										{
											"key": "vsm_host_machine",
											"value": "true"
										},
										{
											"key": "endpoint_type",
											"value": "default"
										},
										{
											"key": "tag_id",
											"value": "один корректный id"
										},
										{
											"key": "product_id",
											"value": "один корректный id"
										},
										{
											"key": "location_id",
											"value": "один корректный id"
										},
										{
											"key": "ou_id",
											"value": "один корректный id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis(ci_class= endpoint; parent_id=один НЕкорректный id; detected_at_id=пустой; agent_id=НЕкорректный id; vsm_host_machine=false; endpoint_type=vm_host; tag_id=один НЕкорректный id; product_id=один НЕкорректный id; location_id=один НЕкорректный id;ou_i",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detected_at_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vsm_host_machine\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"endpoint_type\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().detected_at_id).to.eql(pm.environment.get(\"detected_at_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vsm_host_machine_id).to.eql(pm.environment.get(\"vsm_host_machine\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().endpoint_type).to.eql(pm.environment.get(\"endpoint_type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().product_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.detected_at_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.vsm_host_machine).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.endpoint_type).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"endpoint\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"один НЕкорректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains detected_at_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"detected_at_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains agent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"agent_id\", \"НЕкорректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains vsm_host_machine\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vsm_host_machine\", false);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains endpoint_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"endpoint_type\", \"vm_host\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"один НЕкорректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains product_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"product_id\", \"один НЕкорректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"один НЕкорректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"один НЕкорректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ci_class\" : \"endpoint\",\r\n    \"parent_id\" : \"один НЕкорректный id\",\r\n    \"detected_at_id\" : \"\",\r\n    \"agent_id\" : \"НЕкорректный id\",\r\n    \"vsm_host_machine\" : false,\r\n    \"endpoint_type\" : \"vm_host\",\r\n    \"tag_id\" : \"один НЕкорректный id\",\r\n    \"product_id\" : \"один НЕкорректный id\",\r\n    \"location_id\" : \"один НЕкорректный id\",\r\n    \"ou_id\" : \"один НЕкорректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis?ci_class=endpoint&parent_id=один НЕкорректный id&detected_at_id&agent_id=НЕкорректный id&endpoint_type=vm_host&tag_id=один НЕкорректный id&product_id=один НЕкорректный id&location_id=один НЕкорректный id&ou_id=один НЕкорректный id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis"
									],
									"query": [
										{
											"key": "ci_class",
											"value": "endpoint"
										},
										{
											"key": "parent_id",
											"value": "один НЕкорректный id"
										},
										{
											"key": "detected_at_id",
											"value": ""
										},
										{
											"key": "agent_id",
											"value": "НЕкорректный id"
										},
										{
											"key": "endpoint_type",
											"value": "vm_host"
										},
										{
											"key": "tag_id",
											"value": "один НЕкорректный id"
										},
										{
											"key": "product_id",
											"value": "один НЕкорректный id"
										},
										{
											"key": "location_id",
											"value": "один НЕкорректный id"
										},
										{
											"key": "ou_id",
											"value": "один НЕкорректный id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis(ci_class= storage; parent_id=три корректных id; detected_at_id=корректный id; agent_id=корректный id; vsm_host_machine=пустой; endpoint_type=vm_guest; tag_id=три корректных id; product_id=три корректных id; location_id=три корректных id; ou_id=три",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detected_at_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vsm_host_machine\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"endpoint_type\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().detected_at_id).to.eql(pm.environment.get(\"detected_at_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vsm_host_machine_id).to.eql(pm.environment.get(\"vsm_host_machine\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().endpoint_type).to.eql(pm.environment.get(\"endpoint_type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().product_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.detected_at_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.vsm_host_machine).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.endpoint_type).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"storage\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"три корректных id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains detected_at_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"detected_at_id\", \"корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains agent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"agent_id\", \"корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains vsm_host_machine\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vsm_host_machine\", \"пустой\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains endpoint_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"endpoint_type\", \"vm_guest\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"три корректных id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains product_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"product_id\", \"три корректных id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"три корректных id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"три корректных id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ci_class\" : \"storage\",\r\n    \"parent_id\" : \"три корректных id\",\r\n    \"detected_at_id\" : \"корректный id\",\r\n    \"agent_id\" : \"корректный id\",\r\n    \"vsm_host_machine\" : \"\",\r\n    \"endpoint_type\" : \"vm_guest\",\r\n    \"tag_id\" : \"три корректных id\",\r\n    \"product_id\" : \"три корректных id\",\r\n    \"location_id\" : \"три корректных id\",\r\n    \"ou_id\" : \"три корректных id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis?ci_class=storage&parent_id=три корректный id&detected_at_id=корректный id&agent_id=корректный id&vsm_host_machine&endpoint_type=vm_guest&tag_id=три корректных id&product_id=три корректных id&location_id=три корректных id&ou_id=три корректных id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis"
									],
									"query": [
										{
											"key": "ci_class",
											"value": "storage"
										},
										{
											"key": "parent_id",
											"value": "три корректный id"
										},
										{
											"key": "detected_at_id",
											"value": "корректный id"
										},
										{
											"key": "agent_id",
											"value": "корректный id"
										},
										{
											"key": "vsm_host_machine",
											"value": ""
										},
										{
											"key": "endpoint_type",
											"value": "vm_guest"
										},
										{
											"key": "tag_id",
											"value": "три корректных id"
										},
										{
											"key": "product_id",
											"value": "три корректных id"
										},
										{
											"key": "location_id",
											"value": "три корректных id"
										},
										{
											"key": "ou_id",
											"value": "три корректных id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis(ci_class= gpu; parent_id=один корректный id; detected_at_id=корректный id; agent_id=корректный id; vsm_host_machine=пустой; endpoint_type=пустой; tag_id=пустой; product_id=пустой; location_id=пустой; ou_id=пустой)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detected_at_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vsm_host_machine\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"endpoint_type\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().detected_at_id).to.eql(pm.environment.get(\"detected_at_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vsm_host_machine_id).to.eql(pm.environment.get(\"vsm_host_machine\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().endpoint_type).to.eql(pm.environment.get(\"endpoint_type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().product_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.detected_at_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.vsm_host_machine).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.endpoint_type).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"gpu\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"один корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains detected_at_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"detected_at_id\", \"один корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains agent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"agent_id\", \"один корректный  id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains vsm_host_machine\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vsm_host_machine\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains endpoint_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"endpoint_type\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains product_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"product_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ci_class\" : \"gpu\",\r\n    \"parent_id\" : \"один корректный id\",\r\n    \"detected_at_id\" : \"корректный id\",\r\n    \"agent_id\" : \"корректный id\",\r\n    \"vsm_host_machine\" : \"\",\r\n    \"endpoint_type\" : \"\",\r\n    \"tag_id\" : \"\",\r\n    \"product_id\" : \"\",\r\n    \"location_id\" : \"\",\r\n    \"ou_id\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis?ci_class=gpu&parent_id=один корректный id&detected_at_id=один корректный id&agent_id=один корректный id&vsm_host_machine&endpoint_type&tag_id&product_id&location_id&ou_id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis"
									],
									"query": [
										{
											"key": "ci_class",
											"value": "gpu"
										},
										{
											"key": "parent_id",
											"value": "один корректный id"
										},
										{
											"key": "detected_at_id",
											"value": "один корректный id"
										},
										{
											"key": "agent_id",
											"value": "один корректный id"
										},
										{
											"key": "vsm_host_machine",
											"value": ""
										},
										{
											"key": "endpoint_type",
											"value": ""
										},
										{
											"key": "tag_id",
											"value": ""
										},
										{
											"key": "product_id",
											"value": ""
										},
										{
											"key": "location_id",
											"value": ""
										},
										{
											"key": "ou_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis(ci_class= cpu; parent_id=один корректный id; detected_at_id=корректный id; agent_id=корректный id; vsm_host_machine=пустой; endpoint_type=пустой; tag_id=пустой; product_id=пустой; location_id=пустой; ou_id=пустой)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detected_at_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vsm_host_machine\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"endpoint_type\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().detected_at_id).to.eql(pm.environment.get(\"detected_at_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vsm_host_machine_id).to.eql(pm.environment.get(\"vsm_host_machine\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().endpoint_type).to.eql(pm.environment.get(\"endpoint_type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().product_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.detected_at_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.vsm_host_machine).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.endpoint_type).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"cpu\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"один корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains detected_at_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"detected_at_id\", \"один корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains agent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"agent_id\", \"один корректный  id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains vsm_host_machine\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vsm_host_machine\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains endpoint_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"endpoint_type\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains product_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"product_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ci_class\" : \"cpu\",\r\n    \"parent_id\" : \"один корректный id\",\r\n    \"detected_at_id\" : \"корректный id\",\r\n    \"agent_id\" : \"корректный id\",\r\n    \"vsm_host_machine\" : \"\",\r\n    \"endpoint_type\" : \"\",\r\n    \"tag_id\" : \"\",\r\n    \"product_id\" : \"\",\r\n    \"location_id\" : \"\",\r\n    \"ou_id\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis?ci_class=cpu&parent_id=один корректный id&detected_at_id=один корректный id&agent_id=один корректный id&vsm_host_machine&endpoint_type&tag_id&product_id&location_id&ou_id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis"
									],
									"query": [
										{
											"key": "ci_class",
											"value": "cpu"
										},
										{
											"key": "parent_id",
											"value": "один корректный id"
										},
										{
											"key": "detected_at_id",
											"value": "один корректный id"
										},
										{
											"key": "agent_id",
											"value": "один корректный id"
										},
										{
											"key": "vsm_host_machine",
											"value": ""
										},
										{
											"key": "endpoint_type",
											"value": ""
										},
										{
											"key": "tag_id",
											"value": ""
										},
										{
											"key": "product_id",
											"value": ""
										},
										{
											"key": "location_id",
											"value": ""
										},
										{
											"key": "ou_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis(ci_class= ram; parent_id=один корректный id; detected_at_id=корректный id; agent_id=корректный id; vsm_host_machine=пустой; endpoint_type=пустой; tag_id=пустой; product_id=пустой; location_id=пустой; ou_id=пустой)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detected_at_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vsm_host_machine\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"endpoint_type\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().detected_at_id).to.eql(pm.environment.get(\"detected_at_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vsm_host_machine_id).to.eql(pm.environment.get(\"vsm_host_machine\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().endpoint_type).to.eql(pm.environment.get(\"endpoint_type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().product_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.detected_at_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.vsm_host_machine).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.endpoint_type).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"ram\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"один корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains detected_at_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"detected_at_id\", \"корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains agent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"agent_id\", \"корректный  id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains vsm_host_machine\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vsm_host_machine\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains endpoint_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"endpoint_type\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains product_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"product_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ci_class\" : \"ram\",\r\n    \"parent_id\" : \"один корректный id\",\r\n    \"detected_at_id\" : \"корректный id\",\r\n    \"agent_id\" : \"корректный id\",\r\n    \"vsm_host_machine\" : \"\",\r\n    \"endpoint_type\" : \"\",\r\n    \"tag_id\" : \"\",\r\n    \"product_id\" : \"\",\r\n    \"location_id\" : \"\",\r\n    \"ou_id\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis?ci_class=ram&parent_id=один корректный id&detected_at_id=корректный id&agent_id=корректный id&vsm_host_machine&endpoint_type&tag_id&product_id&location_id&ou_id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis"
									],
									"query": [
										{
											"key": "ci_class",
											"value": "ram"
										},
										{
											"key": "parent_id",
											"value": "один корректный id"
										},
										{
											"key": "detected_at_id",
											"value": "корректный id"
										},
										{
											"key": "agent_id",
											"value": "корректный id"
										},
										{
											"key": "vsm_host_machine",
											"value": ""
										},
										{
											"key": "endpoint_type",
											"value": ""
										},
										{
											"key": "tag_id",
											"value": ""
										},
										{
											"key": "product_id",
											"value": ""
										},
										{
											"key": "location_id",
											"value": ""
										},
										{
											"key": "ou_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis(ci_class= network_interface; parent_id=один корректный id; detected_at_id=корректный id; agent_id=корректный id; vsm_host_machine=пустой; endpoint_type=пустой; tag_id=пустой; product_id=пустой; location_id=пустой; ou_id=пустой)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detected_at_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vsm_host_machine\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"endpoint_type\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().detected_at_id).to.eql(pm.environment.get(\"detected_at_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vsm_host_machine_id).to.eql(pm.environment.get(\"vsm_host_machine\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().endpoint_type).to.eql(pm.environment.get(\"endpoint_type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().product_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.detected_at_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.vsm_host_machine).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.endpoint_type).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"network_interface\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"один корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains detected_at_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"detected_at_id\", \"корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains agent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"agent_id\", \"корректный  id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains vsm_host_machine\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vsm_host_machine\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains endpoint_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"endpoint_type\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains product_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"product_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ci_class\" : \"network_interface\",\r\n    \"parent_id\" : \"один корректный id\",\r\n    \"detected_at_id\" : \"корректный id\",\r\n    \"agent_id\" : \"корректный id\",\r\n    \"vsm_host_machine\" : \"\",\r\n    \"endpoint_type\" : \"\",\r\n    \"tag_id\" : \"\",\r\n    \"product_id\" : \"\",\r\n    \"location_id\" : \"\",\r\n    \"ou_id\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis?ci_class=network_interface&parent_id=один корректный id&detected_at_id=корректный id&agent_id=корректный id&vsm_host_machine&endpoint_type&tag_id&product_id&location_id&ou_id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis"
									],
									"query": [
										{
											"key": "ci_class",
											"value": "network_interface"
										},
										{
											"key": "parent_id",
											"value": "один корректный id"
										},
										{
											"key": "detected_at_id",
											"value": "корректный id"
										},
										{
											"key": "agent_id",
											"value": "корректный id"
										},
										{
											"key": "vsm_host_machine",
											"value": ""
										},
										{
											"key": "endpoint_type",
											"value": ""
										},
										{
											"key": "tag_id",
											"value": ""
										},
										{
											"key": "product_id",
											"value": ""
										},
										{
											"key": "location_id",
											"value": ""
										},
										{
											"key": "ou_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis(ci_class= document_device; parent_id=один корректный id; detected_at_id=корректный id; agent_id=корректный id; vsm_host_machine=пустой; endpoint_type=пустой; tag_id=пустой; product_id=пустой; location_id=пустой; ou_id=пустой)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detected_at_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vsm_host_machine\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"endpoint_type\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().detected_at_id).to.eql(pm.environment.get(\"detected_at_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vsm_host_machine_id).to.eql(pm.environment.get(\"vsm_host_machine\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().endpoint_type).to.eql(pm.environment.get(\"endpoint_type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().product_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.detected_at_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.vsm_host_machine).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.endpoint_type).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"document_device\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"один корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains detected_at_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"detected_at_id\", \"корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains agent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"agent_id\", \"корректный  id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains vsm_host_machine\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vsm_host_machine\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains endpoint_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"endpoint_type\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains product_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"product_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"\");\r",
											"})\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ci_class\" : \"document_device\",\r\n    \"parent_id\" : \"один корректный id\",\r\n    \"detected_at_id\" : \"корректный id\",\r\n    \"agent_id\" : \"корректный id\",\r\n    \"vsm_host_machine\" : \"\",\r\n    \"endpoint_type\" : \"\",\r\n    \"tag_id\" : \"\",\r\n    \"product_id\" : \"\",\r\n    \"location_id\" : \"\",\r\n    \"ou_id\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis?ci_class=document_device&parent_id=один корректный id&detected_at_id=корректный id&agent_id=корректный id&vsm_host_machine&endpoint_type&tag_id&product_id&location_id&ou_id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis"
									],
									"query": [
										{
											"key": "ci_class",
											"value": "document_device"
										},
										{
											"key": "parent_id",
											"value": "один корректный id"
										},
										{
											"key": "detected_at_id",
											"value": "корректный id"
										},
										{
											"key": "agent_id",
											"value": "корректный id"
										},
										{
											"key": "vsm_host_machine",
											"value": ""
										},
										{
											"key": "endpoint_type",
											"value": ""
										},
										{
											"key": "tag_id",
											"value": ""
										},
										{
											"key": "product_id",
											"value": ""
										},
										{
											"key": "location_id",
											"value": ""
										},
										{
											"key": "ou_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis(ci_class=пустой ; parent_id=один корректный id; detected_at_id=корректный id; agent_id=корректный id; vsm_host_machine=пустой; endpoint_type=пустой; tag_id=пустой; product_id=пустой; location_id=пустой; ou_id=пустой)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"parent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detected_at_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"vsm_host_machine\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"endpoint_type\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"location_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ou_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().parent_id).to.eql(pm.environment.get(\"parent_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().detected_at_id).to.eql(pm.environment.get(\"detected_at_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().vsm_host_machine_id).to.eql(pm.environment.get(\"vsm_host_machine\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().endpoint_type).to.eql(pm.environment.get(\"endpoint_type\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().product_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().location_id).to.eql(pm.environment.get(\"location_id\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ou_id).to.eql(pm.environment.get(\"ou_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.parent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.detected_at_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.vsm_host_machine).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.endpoint_type).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.location_id).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.ou_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains parent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"parent_id\", \"один корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains detected_at_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"detected_at_id\", \"корректный id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains agent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"agent_id\", \"корректный  id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains vsm_host_machine\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"vsm_host_machine\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains endpoint_type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"endpoint_type\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains product_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"product_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains location_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"location_id\", \"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ou_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ou_id\", \"\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ci_class\" : \"пустой\",\r\n    \"parent_id\" : \"один корректный id\",\r\n    \"detected_at_id\" : \"корректный id\",\r\n    \"agent_id\" : \"корректный id\",\r\n    \"vsm_host_machine\" : \"пустой\",\r\n    \"endpoint_type\" : \"пустой\",\r\n    \"tag_id\" : \"пустой\",\r\n    \"product_id\" : \"пустой\",\r\n    \"location_id\" : \"пустой\",\r\n    \"ou_id\" : \"пустой\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis?ci_class&parent_id=один корректный id&detected_at_id=корректный id&agent_id=корректный id&vsm_host_machine&endpoint_type&tag_id&product_id&location_id&ou_id",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis"
									],
									"query": [
										{
											"key": "ci_class",
											"value": ""
										},
										{
											"key": "parent_id",
											"value": "один корректный id"
										},
										{
											"key": "detected_at_id",
											"value": "корректный id"
										},
										{
											"key": "agent_id",
											"value": "корректный id"
										},
										{
											"key": "vsm_host_machine",
											"value": ""
										},
										{
											"key": "endpoint_type",
											"value": ""
										},
										{
											"key": "tag_id",
											"value": ""
										},
										{
											"key": "product_id",
											"value": ""
										},
										{
											"key": "location_id",
											"value": ""
										},
										{
											"key": "ou_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT cis/{uid}/tag(добавить и удалить тэги к КЕ)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"\r",
											"})\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tag",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tag"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT cis{uid}/tag(добавить тэг к продукту, ранее не имевшему тэг)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"один корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"один корректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT cis{uid}/tag(добавить тэг к продукту, ранее имевшему тэг)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"один корректный id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"один корректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT cis{uid}/tag(добавить три тэга к продукту, ранее не имевшему тэг)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"три корректных id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"три корректных id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT cis{uid}/tag(оставить пустой массив)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"пустой\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"пустой\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT cis{uid}/tag(добавить три тэга к продукту, ранее имевшему тэг)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"три корректных id\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"три корректных id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis/{uid}(inventory-number=изменению  значения инвентарного номера в окне, открываемом из трея агента)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"inventory-number\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().inventory-number).to.eql(pm.environment.get(\"inventory-number\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.inventory-number).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains inventory-number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"inventory-number\", \"изменение значения инвентарного номера в окне\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"inventory-number\" : \"изменение значения инвентарного номера в окне\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&inventory-number=изменение значения инвентарного номера в окне",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "inventory-number",
											"value": "изменение значения инвентарного номера в окне"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis/{uid}(host_name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"host_name\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().host_name).to.eql(pm.environment.get(\"host_name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.host_name).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains host_name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"host_name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"name\");\r",
											"});\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
											"type": "text"
										},
										{
											"key": "host_name",
											"value": "",
											"type": "text"
										},
										{
											"key": "name",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&host_name&name",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "host_name",
											"value": ""
										},
										{
											"key": "name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis/{uid}(agent_id=перерегистрировать агента)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent_id).to.eql(pm.environment.get(\"agent_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.agent_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains agent_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"agent_id\", \"перерегистрировать агента\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"agent_id\" : \"перерегистрировать агента\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&agent_id=перерегистрировать агента",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "agent_id",
											"value": "перерегистрировать агента"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis/{uid}(product_id=id продукта)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().product_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains product_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"product_id\", \"id продукта\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"product_id\" : \"id продукта\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&product_id=id продукта",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "product_id",
											"value": "id продукта"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis/{uid}(product_id=null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"product_id\");\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().product_id).to.eql(pm.environment.get(\"product_id\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.product_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains product_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"product_id\", \"null\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"product_id\" : \"null\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&product_id=null",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "product_id",
											"value": "null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis/{uid}(ci_class=software)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"processed_at\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().machine_uid).to.eql(pm.environment.get(\"machine_uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().processed_at).to.eql(pm.environment.get(\"processed_at\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().result).to.eql(pm.environment.get(\"result\"));\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.machine_uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.processed_at).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.result).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"software\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_uid\", \"591fe9a7-3ad3-4012-818a-5588ec4eb823\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains processed_at\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"processed_at\",  \"2021-12-28T11:48:28.507+03:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains result\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"result\", \"Success\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n\"ci_class\" : \"software\",\r\n\"data\": [\r\n    \t{\r\n        \t\"exePath\": \"\",\r\n        \t\"installedAt\": \"\",\r\n        \t\"name\": \"\",\r\n        \t\"note\": \"\",\r\n        \t\"owner\": \"all\",\r\n        \t\"version\": \"\"\r\n    \t}\r\n  ],\r\n\t\"machine_uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\",\r\n\t\"processed_at\": \"2021-12-28T11:48:28.507+03:00\",\r\n\t\"result\": \"Success\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ci_class=software",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ci_class",
											"value": "software"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis/{uid}(ci_class=service)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"processed_at\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().machine_uid).to.eql(pm.environment.get(\"machine_uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().processed_at).to.eql(pm.environment.get(\"processed_at\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().result).to.eql(pm.environment.get(\"result\"));\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.machine_uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.processed_at).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.result).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"service\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_uid\", \"591fe9a7-3ad3-4012-818a-5588ec4eb823\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains processed_at\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"processed_at\",  \"2021-12-28T11:48:16.273+03:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains result\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"result\", \"Success\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"ci_class\" : \"service\",\r\n\"data\": [\r\n    \t{\r\n        \t\"command\": \"C:\\\\Windows\\\\ADWS\\\\Microsoft.ActiveDirectory.WebServices.exe\",\r\n        \t\"displayName\": \"Active Directory Web Services\",\r\n        \t\"name\": \"ADWS\",\r\n        \t\"owner\": \"LocalSystem\",\r\n        \t\"startMode\": \"auto\",\r\n        \t\"uid\": \"19230309-6f7d-57d0-bc9f-8a727236c1bf\"\r\n    \t}\r\n],\r\n\t\"machine_uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\",\r\n\t\"processed_at\": \"2021-12-28T11:48:16.273+03:00\",\r\n     \"result\": \"Success\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ci_class=service",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ci_class",
											"value": "service"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis/{uid}(ci_class=endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bios\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"cpu\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"drives\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"hostName\");\r",
											"});\r",
											"\r",
											" pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"hypervisors\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ram\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"processed_at\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent).to.eql(pm.environment.get(\"agent\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().bios).to.eql(pm.environment.get(\"bios\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().cpu).to.eql(pm.environment.get(\"cpu\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().drives).to.eql(pm.environment.get(\"drives\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().hostName).to.eql(pm.environment.get(\"hostName\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().hypervisors).to.eql(pm.environment.get(\"hypervisors\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ram).to.eql(pm.environment.get(\"ram\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().machine_uid).to.eql(pm.environment.get(\"machine_uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().processed_at).to.eql(pm.environment.get(\"processed_at\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().result).to.eql(pm.environment.get(\"result\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.agent).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.bios).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.cpu).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.drives).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.hostName).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.hypervisors).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.os).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.ram).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.machine_uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.processed_at).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.result).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"endpoint\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_uid\", \"591fe9a7-3ad3-4012-818a-5588ec4eb823\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains processed_at\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"processed_at\",  \"2021-12-28T11:48:20.413+03:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains result\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"result\", \"Success\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"ci_class\" : \"endpoint\",\r\n    \"data\": {\r\n    \t\"agent\": {\r\n        \t\"abi\": \"x86_64-little_endian-llp64\",\r\n        \t\"architecture\": \"x86_64\",\r\n        \t\"version\": \"0.4.163\"\r\n    \t},\r\n    \t\"bios\": {\r\n        \t\"manufacturer\": \"American Megatrends Inc.\",\r\n        \t\"productName\": \"BIOS Date: 04/16/13 11:24:50 Ver: 18.01\",\r\n        \t\"serialNumber\": \"System Serial Number\",\r\n        \t\"version\": \"1801   \"\r\n    \t},\r\n    \t\"cpu\": [\r\n        \t{\r\n            \t\"architecture\": \"x86_64\",\r\n            \t\"name\": \"AMD Phenom(tm) II X6 1100T Processor\",\r\n            \t\"note\": \"AMD64 Family 16 Model 10 Stepping 0\",\r\n            \t\"numCores\": 6,\r\n            \t\"uid\": \"0\"\r\n        \t}\r\n    \t],\r\n    \t\"drives\": [\r\n        \t{\r\n            \t\"fsType\": \"NTFS\",\r\n            \t\"mountPoint\": \"C:/\",\r\n            \t\"serialNumber\": \"1847389967\",\r\n            \t\"size\": 156918345728,\r\n            \t\"type\": \"logical\",\r\n            \t\"uid\": \"\\\\\\\\?\\\\Volume{aeee3d88-98ca-11e5-80b9-14dae9b3ad7b}\\\\\"\r\n        \t}\r\n],\r\n    \t\"hostName\": \"SRV10904\",\r\n    \t\"hypervisors\": [\r\n        \t{\r\n            \t\"name\": \"HyperV\",\r\n            \t\"version\": \"\"\r\n        \t}\r\n    \t],\r\n    \t\"os\": {\r\n        \t\"kernelName\": \"winnt\",\r\n        \t\"kernelVersion\": \"6.3.9600\",\r\n        \t\"name\": \"windows\",\r\n        \t\"prettyName\": \"Windows Server 2012 R2 Version 6.3 (Build 9600)\",\r\n        \t\"username\": \"NT AUTHORITY\\\\SYSTEM\",\r\n        \t\"users\": [\r\n                \"ACC\\\\Admin\"\r\n],\r\n        \t\"version\": \"server2012r2\"\r\n    \t},\r\n    \t\"ram\": [\r\n        \t{\r\n            \t\"size\": 16910483456\r\n        \t}\r\n    \t],\r\n    \t\"uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\"\r\n\t},\r\n\t\"machine_uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\",\r\n\t\"processed_at\": \"2021-12-28T11:48:20.413+03:00\",\r\n\t\"result\": \"Success\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ci_class=endpoint",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ci_class",
											"value": "endpoint"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis/{uid}(ci_class=storage)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"pm.collectionVariables.set(\"variable_key\", \"variable_value\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"processed_at\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().machine_uid).to.eql(pm.environment.get(\"machine_uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().processed_at).to.eql(pm.environment.get(\"processed_at\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().result).to.eql(pm.environment.get(\"result\"));\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.machine_uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.processed_at).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.result).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"storage\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_uid\", \"591fe9a7-3ad3-4012-818a-5588ec4eb823\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains processed_at\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"processed_at\",  \"2021-12-28T11:48:15.117+03:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains result\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"result\", \"Success\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"ci_class\" : \"storage\",\r\n    \"data\": [\r\n    \t{\r\n        \t\"fsType\": \"NTFS\",\r\n        \t\"mountPoint\": \"C:/\",\r\n        \t\"serialNumber\": \"1847389967\",\r\n        \t\"size\": 156918345728,\r\n        \t\"type\": \"logical\",\r\n        \t\"uid\": \"\\\\\\\\?\\\\Volume{aeee3d88-98ca-11e5-80b9-14dae9b3ad7b}\\\\\"\r\n    \t}\r\n],\r\n\t\"machine_uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\",\r\n\t\"processed_at\": \"2021-12-28T11:48:15.117+03:00\",\r\n\t\"result\": \"Success\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ci_class=storage",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ci_class",
											"value": "storage"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis/{uid}(ci_class=gpu)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"pm.collectionVariables.set(\"variable_key\", \"variable_value\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"processed_at\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().machine_uid).to.eql(pm.environment.get(\"machine_uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().processed_at).to.eql(pm.environment.get(\"processed_at\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().result).to.eql(pm.environment.get(\"result\"));\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.machine_uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.processed_at).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.result).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"gpu\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_uid\", \"591fe9a7-3ad3-4012-818a-5588ec4eb823\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains processed_at\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"processed_at\",  \"2021-12-28T11:48:14.835+03:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains result\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"result\", \"Success\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"ci_class\" : \"gpu\",\r\n    \"data\": [\r\n    \t{\r\n        \t\"name\": \"Microsoft Basic Display Adapter\",\r\n        \t\"note\": \"Microsoft Basic Display Adapter\"\r\n    \t}\r\n\t],\r\n\t\"machine_uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\",\r\n\t\"processed_at\": \"2021-12-28T11:48:14.835+03:00\",\r\n\t\"result\": \"Success\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ci_class=gpu",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ci_class",
											"value": "gpu"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis/{uid}(ci_class=сpu)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"pm.collectionVariables.set(\"variable_key\", \"variable_value\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"processed_at\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().machine_uid).to.eql(pm.environment.get(\"machine_uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().processed_at).to.eql(pm.environment.get(\"processed_at\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().result).to.eql(pm.environment.get(\"result\"));\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.machine_uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.processed_at).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.result).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"сpu\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_uid\", \"591fe9a7-3ad3-4012-818a-5588ec4eb823\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains processed_at\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"processed_at\",  \"2021-12-28T11:48:14.663+03:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains result\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"result\", \"Success\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"ci_class\" : \"сpu\",\r\n    \"data\": [\r\n    \t{\r\n        \t\"architecture\": \"x86_64\",\r\n        \t\"name\": \"AMD Phenom(tm) II X6 1100T Processor\",\r\n        \t\"note\": \"AMD64 Family 16 Model 10 Stepping 0\",\r\n        \t\"numCores\": 6,\r\n        \t\"uid\": \"0\"\r\n    \t}\r\n\t],\r\n\t\"machine_uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\",\r\n\t\"processed_at\": \"2021-12-28T11:48:14.663+03:00\",\r\n\t\"result\": \"Success\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ci_class=сpu",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ci_class",
											"value": "сpu"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis/{uid}(ci_class=ram)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bios\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"cpu\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"drives\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"hostName\");\r",
											"});\r",
											"\r",
											" pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"hypervisors\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ram\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"processed_at\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent).to.eql(pm.environment.get(\"agent\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().bios).to.eql(pm.environment.get(\"bios\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().cpu).to.eql(pm.environment.get(\"cpu\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().drives).to.eql(pm.environment.get(\"drives\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().hostName).to.eql(pm.environment.get(\"hostName\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().hypervisors).to.eql(pm.environment.get(\"hypervisors\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ram).to.eql(pm.environment.get(\"ram\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().machine_uid).to.eql(pm.environment.get(\"machine_uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().processed_at).to.eql(pm.environment.get(\"processed_at\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().result).to.eql(pm.environment.get(\"result\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.agent).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.bios).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.cpu).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.drives).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.hostName).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.hypervisors).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.os).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.ram).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.machine_uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.processed_at).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.result).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"endpoint\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_uid\", \"591fe9a7-3ad3-4012-818a-5588ec4eb823\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains processed_at\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"processed_at\",  \"2021-12-28T11:48:20.413+03:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains result\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"result\", \"Success\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"ci_class\" : \"ram\",\r\n    \"data\": {\r\n    \t\"agent\": {\r\n        \t\"abi\": \"x86_64-little_endian-llp64\",\r\n        \t\"architecture\": \"x86_64\",\r\n        \t\"version\": \"0.4.163\"\r\n    \t},\r\n    \t\"bios\": {\r\n        \t\"manufacturer\": \"American Megatrends Inc.\",\r\n        \t\"productName\": \"BIOS Date: 04/16/13 11:24:50 Ver: 18.01\",\r\n        \t\"serialNumber\": \"System Serial Number\",\r\n        \t\"version\": \"1801   \"\r\n    \t},\r\n    \t\"cpu\": [\r\n        \t{\r\n            \t\"architecture\": \"x86_64\",\r\n            \t\"name\": \"AMD Phenom(tm) II X6 1100T Processor\",\r\n            \t\"note\": \"AMD64 Family 16 Model 10 Stepping 0\",\r\n            \t\"numCores\": 6,\r\n            \t\"uid\": \"0\"\r\n        \t}\r\n    \t],\r\n    \t\"drives\": [\r\n        \t{\r\n            \t\"fsType\": \"NTFS\",\r\n            \t\"mountPoint\": \"C:/\",\r\n            \t\"serialNumber\": \"1847389967\",\r\n            \t\"size\": 156918345728,\r\n            \t\"type\": \"logical\",\r\n            \t\"uid\": \"\\\\\\\\?\\\\Volume{aeee3d88-98ca-11e5-80b9-14dae9b3ad7b}\\\\\"\r\n        \t}\r\n],\r\n    \t\"hostName\": \"SRV10904\",\r\n    \t\"hypervisors\": [\r\n        \t{\r\n            \t\"name\": \"HyperV\",\r\n            \t\"version\": \"\"\r\n        \t}\r\n    \t],\r\n    \t\"os\": {\r\n        \t\"kernelName\": \"winnt\",\r\n        \t\"kernelVersion\": \"6.3.9600\",\r\n        \t\"name\": \"windows\",\r\n        \t\"prettyName\": \"Windows Server 2012 R2 Version 6.3 (Build 9600)\",\r\n        \t\"username\": \"NT AUTHORITY\\\\SYSTEM\",\r\n        \t\"users\": [\r\n                \"ACC\\\\Admin\"\r\n],\r\n        \t\"version\": \"server2012r2\"\r\n    \t},\r\n    \t\"ram\": [\r\n        \t{\r\n            \t\"size\": 16910483456\r\n        \t}\r\n    \t],\r\n    \t\"uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\"\r\n\t},\r\n\t\"machine_uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\",\r\n\t\"processed_at\": \"2021-12-28T11:48:20.413+03:00\",\r\n\t\"result\": \"Success\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ci_class=ram",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ci_class",
											"value": "ram"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis/{uid}(ci_class=network_interface)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"});\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"agent\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bios\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"cpu\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"drives\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"hostName\");\r",
											"});\r",
											"\r",
											" pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"hypervisors\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"os\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches array\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ram\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"machine_uid\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"processed_at\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"result\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().data).to.eql(pm.environment.get(\"data\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().agent).to.eql(pm.environment.get(\"agent\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().bios).to.eql(pm.environment.get(\"bios\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().cpu).to.eql(pm.environment.get(\"cpu\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().drives).to.eql(pm.environment.get(\"drives\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().hostName).to.eql(pm.environment.get(\"hostName\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().hypervisors).to.eql(pm.environment.get(\"hypervisors\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().os).to.eql(pm.environment.get(\"os\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ram).to.eql(pm.environment.get(\"ram\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().machine_uid).to.eql(pm.environment.get(\"machine_uid\"));\r",
											"});\r",
											"\r",
											" pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().processed_at).to.eql(pm.environment.get(\"processed_at\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().result).to.eql(pm.environment.get(\"result\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.agent).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.bios).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.cpu).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.drives).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.hostName).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.hypervisors).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.os).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.ram).to.be.an(\"array\");\r",
											"   pm.expect(jsonData.machine_uid).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.processed_at).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.result).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"network_interface\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains machine_uid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"machine_uid\", \"591fe9a7-3ad3-4012-818a-5588ec4eb823\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains processed_at\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"processed_at\",  \"2021-12-28T11:48:14.335+03:00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains result\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"result\", \"Success\");\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"ci_class\" : \"network_interface\",\r\n    \"data\": [\r\n    \t{\r\n        \t\"dhcp4Enabled\": false,\r\n        \t\"dhcp6Enabled\": false,\r\n        \t\"humanReadableName\": \"vEthernet (ext238)\",\r\n        \t\"ipAddresses\": [\r\n            \t\"192.168.238.2/24\"\r\n        \t],\r\n        \t\"ipv4Dns\": [\r\n            \t\"\"\r\n        \t],\r\n        \t\"ipv4Gateway\": [\r\n        \t],\r\n        \t\"ipv6Dns\": [\r\n   \t         \"\"\r\n        \t],\r\n        \t\"ipv6Gateway\": [\r\n        \t],\r\n        \t\"macAddress\": \"C4:A8:1D:7E:32:98\",\r\n        \t\"name\": \"ethernet_28\",\r\n        \t\"type\": 3\r\n    \t}\r\n],\r\n\t\"machine_uid\": \"591fe9a7-3ad3-4012-818a-5588ec4eb823\",\r\n\t\"processed_at\": \"2021-12-28T11:48:14.335+03:00\",\r\n\t\"result\": \"Success\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ci_class=network_interface",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ci_class",
											"value": "network_interface"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET cis/{uid}(ci_class=network_interface)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ci_class\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"document_device\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().ci_class).to.eql(pm.environment.get(\"ci_class\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().document_device).to.eql(pm.environment.get(\"document_device\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.ci_class).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.document_device).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ci_class\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"ci_class\", \"document_device\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains document_device\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"document_device\", \"null\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"ci_class\" : \"document_device\",\r\n    \"document_device\" : \"null\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6&ci_class=document_device",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										},
										{
											"key": "ci_class",
											"value": "document_device"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST cis/{uid}/tag(прикрепить тэг к продукту, ранее не имевшего тэга)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"один корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"один корректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST cis/{uid}/tag(прикрепить два тэга к продукту, ранее не имевшего тэга)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"два корректных id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"два корректных id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST cis/{uid}/tag(прикрепить тэг к продукту, ранее имевшему тэг)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"один корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"один корректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST cis/{uid}/tag(прикрепить два тэга к продукту, ранее имевшему тэг)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"два корректных id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"два корректных id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE cis/{uid}/tag(удалить один тэг у КЕ, у которого есть один тэг)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"один корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"один корректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE cis/{uid}/tag(удалить один тэг у КЕ, у которого есть несколько тэгов)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"один корректный id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"один корректный id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE cis/{uid}/tag(удалить несколько тэгов у КЕ, у которого есть несколько тэгов)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"{\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be with Body\", function () {\r",
											"pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"pm.test(\"Response must be json\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function ()  {\r",
											"pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"tag_id\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Body matches string not include\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"    });\r",
											"\r",
											"     pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().uid).to.eql(pm.environment.get(\"uid\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Response property matches environment variable\", function () {\r",
											"  pm.expect(pm.response.json().tag_id).to.eql(pm.environment.get(\"tag_id\"));\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Test data type of the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.uid).to.be.a(\"string\");\r",
											"   pm.expect(jsonData.tag_id).to.be.a(\"string\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains tag_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"tag_id\", \"несколько корректных id\");\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"uid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n    \"tag_id\" : \"несколько корректных id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev3.u-system.tech/api/v1/cis/?uid=3fa85f64-5717-4562-b3fc-2c963f66afa6/tags",
									"protocol": "https",
									"host": [
										"dev3",
										"u-system",
										"tech"
									],
									"path": [
										"api",
										"v1",
										"cis",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6/tags"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "variable_key",
			"value": ""
		}
	]
}